!function(){angular.module("app.services",[])}(),function(){"use strict";function n(n){function e(e){return n.get("api/product/"+e).then(function(n){return n.data}).catch(function(n){console.log(n.message)})}function o(e){return n.get("api/product",{params:e}).then(function(n){return n.data}).catch(function(n){console.log(n.message)})}function t(e){return e.id?n.put("api/product",e).then(function(n){return n.data}).catch(function(n){return n.message}):n.post("api/product",e).then(function(n){return n.data}).catch(function(n){return n.message})}return{getMedia:e,getAllMedia:o,save:t}}n.$inject=["$http"];angular.module("app.services").factory("ProductService",n)}(),function(){"use strict";var n=angular.module("app",["app.services","app.directives","shared.components","ngComponentRouter","ui.bootstrap","smart-table"]);n.component("libraryApp",{templateUrl:"/app/product-app.component.html",$routeConfig:[{path:"/",name:"List",component:"list",useAsDefault:!0}]}),n.value("$routerRootComponent","libraryApp")}(),function(){function n(n){var e=this;e.$onInit=function(){e.resolve&&(e.id=e.resolve.id),e.id&&n.get("api/publisher/"+e.id).then(function(n){e.publisher=n.data}).catch(function(n){console.log("Error retriving publisher",n.message)}).finally(function(){}),console.log("$ctrl",e)},e.cancel=function(){e.dismiss()},e.save=function(){return n.post("api/publisher",e.publisher).then(function(n){angular.extend(e.publisher,n.data)}).catch(function(n){console.log("Error saving publisher",n.message)}).finally(function(){console.log("edit publisher",e.publisher),e.modalInstance.close(e.publisher)})}}var e=angular.module("app");e.component("publisherEdit",{bindings:{id:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/publisher/publisher-edit.component.html",controller:["$http",n]})}(),function(){function n(n){var e=this;e.$onInit=function(){console.log("summary active"),e.resolve&&(e.id=e.resolve.id,e.asModal=e.resolve.asModal,e.addStaffVisible=!1),n.getMedia(e.id).then(function(n){e.media=n})},e.createStaff=function(){console.log("add staff modal")},e.cancel=function(){e.dismiss()}}var e=angular.module("app");e.component("mediaSummary",{bindings:{id:"<",asModal:"<",resolve:"<",close:"&",dismiss:"&"},templateUrl:"app/product/product-summary.component.html",controller:["ProductService",n]})}(),function(){"use strict";function n(n,e){var o,t=this,i=10;t.searchModel={page:1,pageSize:i},t.$onInit=function(){},t.search=function(n){o=n,e.getAllMedia(t.searchModel).then(function(n){t.media=n.results,t.searchModel=n,delete t.searchModel.results})},t.paged=function(){t.search(o)},t.edit=function(e){angular.copy(e);n.open({component:"mediaEdit",bindings:{modalInstance:"<"},resolve:{id:e.id},size:"lg"}).result.then(function(n){angular.extend(e,n)},function(n){})},t.create=function(){n.open({component:"mediaEdit",bindings:{modalInstance:"<"},size:"lg"}).result.then(function(n){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),console.info("returning result",n),t.media.unshift(n)},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})},t.showDetails=function(e){n.open({component:"mediaSummary",bindings:{modalInstance:"<"},resolve:{id:e,asModal:!0},size:"lg"}).result.then(function(n){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),console.info(n)},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})}}var e=angular.module("app");e.component("list",{templateUrl:"app/product/product-list.component.html",controller:["$uibModal","ProductService",n]})}(),function(){function n(n){var e=this;e.$onInit=function(){e.resolve&&(e.id=e.resolve.id),e.id&&n.getMedia(e.id).then(function(n){e.media=n})},e.cancel=function(){e.dismiss()},e.save=function(){return n.save(e.media).then(function(n){angular.extend(e.media,n)}).catch(function(n){console.log("Error saving product",n.message)}).finally(function(){e.modalInstance.close(e.media)})}}var e=angular.module("app");e.component("mediaEdit",{templateUrl:"app/product/product-edit.component.html",bindings:{id:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},controller:["ProductService",n]})}(),function(){angular.module("app.directives",[]).directive("stSubmitSearch",["stConfig","$timeout","$parse",function(n,e,o){return{require:"^stTable",link:function(n,e,o,t){return e.bind("click",function(){var n=t;n.pipe()})}}}])}(),function(){angular.module("shared.components",[])}(),function(){function n(n,e){var o=this;o.$onInit=function(){n.get("api/publisher").then(function(n){o.publishers=n.data}).catch(function(n){console.log(n.message)})},o.create=function(){e.open({component:"publisherEdit",bindings:{modalInstance:"<"},size:"lg"}).result.then(function(n){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),console.info("returning result",n),o.publishers.unshift(n),o.id=n.id},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})},o.edit=function(){e.open({component:"publisherEdit",bindings:{modalInstance:"<"},resolve:{id:o.id},size:"lg"}).result.then(function(n){angular.forEach(o.publishers,function(e){e.id===o.id&&(angular.extend(e,n),o.id=e.id)})},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})}}var e=angular.module("shared.components");e.component("publisherList",{bindings:{id:"="},templateUrl:"app/common/publisher-list.component.html",controller:["$http","$uibModal",n]})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
