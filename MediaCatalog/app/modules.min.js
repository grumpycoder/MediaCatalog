!function(){angular.module("app.services",[])}(),function(){"use strict";function n(n){function e(e){return n.get("api/product/"+e).then(function(n){return n.data}).catch(function(n){console.log(n.message)})}function t(e){return n.get("api/product",{params:e}).then(function(n){return n.data}).catch(function(n){console.log(n.message)})}function o(e){return e.id?n.put("api/product",e).then(function(n){return n.data}).catch(function(n){return n.message}):n.post("api/product",e).then(function(n){return n.data}).catch(function(n){return n.message})}return{getProduct:e,getAllProducts:t,save:o}}n.$inject=["$http"];angular.module("app.services").factory("ProductService",n)}(),function(){"use strict";var n=angular.module("app",["app.services","app.directives","shared.components","ngComponentRouter","ui.bootstrap","smart-table"]);n.component("libraryApp",{templateUrl:"/app/product-app.component.html",$routeConfig:[{path:"/",name:"List",component:"list",useAsDefault:!0}]}),n.value("$routerRootComponent","libraryApp"),n.config(["stConfig",function(n){n.search.delay=2e3}])}(),function(){function n(n){var e=this;e.$onInit=function(){e.resolve&&(e.id=e.resolve.id),e.id&&n.get("api/publisher/"+e.id).then(function(n){e.publisher=n.data}).catch(function(n){console.log("Error retriving publisher",n.message)}).finally(function(){}),console.log("$ctrl",e)},e.cancel=function(){e.dismiss()},e.save=function(){return n.post("api/publisher",e.publisher).then(function(n){angular.extend(e.publisher,n.data)}).catch(function(n){console.log("Error saving publisher",n.message)}).finally(function(){console.log("edit publisher",e.publisher),e.modalInstance.close(e.publisher)})}}var e=angular.module("app");e.component("publisherEdit",{bindings:{id:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/publisher/publisher-edit.component.html",controller:["$http",n]})}(),function(){function n(n){var e=this;e.$onInit=function(){e.resolve&&(e.id=e.resolve.id,e.asModal=e.resolve.asModal,e.addStaffVisible=!1),n.getProduct(e.id).then(function(n){e.product=n})},e.createStaff=function(){console.log("add staff modal")},e.cancel=function(){e.dismiss()}}var e=angular.module("app");e.component("productSummary",{bindings:{id:"<",asModal:"<",resolve:"<",close:"&",dismiss:"&"},templateUrl:"app/product/product-summary.component.html",controller:["ProductService",n]})}(),function(){"use strict";function n(n,e){var t,o=this,i=10;o.searchModel={page:1,pageSize:i},o.$onInit=function(){},o.search=function(n){t=n,e.getAllProducts(o.searchModel).then(function(n){o.products=n.results,o.searchModel=n,delete o.searchModel.results})},o.paged=function(){o.search(t)},o.edit=function(e){n.open({component:"productEdit",bindings:{modalInstance:"<"},resolve:{id:e.id},size:"lg"}).result.then(function(n){angular.extend(e,n)},function(n){})},o.create=function(){n.open({component:"productEdit",bindings:{modalInstance:"<"},size:"lg"}).result.then(function(n){o.products.unshift(n)},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})},o.showDetails=function(e){n.open({component:"productSummary",bindings:{modalInstance:"<"},resolve:{id:e,asModal:!0},size:"lg"}).result.then(function(n){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),console.info(n)},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})}}var e=angular.module("app");e.component("list",{templateUrl:"app/product/product-list.component.html",controller:["$uibModal","ProductService",n]})}(),function(){function n(n){var e=this;e.$onInit=function(){e.resolve&&(e.id=e.resolve.id),e.id&&n.getProduct(e.id).then(function(n){e.product=n})},e.cancel=function(){e.dismiss()},e.save=function(){return n.save(e.product).then(function(n){angular.extend(e.product,n)}).catch(function(n){console.log("Error saving product",n.message)}).finally(function(){e.modalInstance.close(e.product)})}}var e=angular.module("app");e.component("productEdit",{templateUrl:"app/product/product-edit.component.html",bindings:{id:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},controller:["ProductService",n]})}(),function(){angular.module("app.directives",[])}(),function(){var n=angular.module("app.directives");n.directive("stSubmitSearch",["stConfig","$timeout","$parse",function(n,e,t){return{require:"^stTable",link:function(n,e,t,o){return e.bind("click",function(){console.log("search");var n=o;n.pipe()})}}}]),n.directive("clearKey",function(){return{restrict:"EA",require:"ngModel",link:function(n,e,t,o){e.on("keydown",function(e){27===e.which&&(o.$setViewValue(null),o.$render(),n.$apply())})}}}),n.directive("stResetSearch",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(n,e,t,o){return e.bind("click",function(){var e=o[1],t=o[0];return n.$apply(function(){angular.forEach(e.$viewValue,function(n,t){"page"===t.toLowerCase()&&(e.$viewValue[t]=1),Array.isArray(n)||_.includes(t.toLowerCase(),"page")||(e.$viewValue[t]=null)});var n=t.tableState();return n.search.predicateObject={},n.pagination.start=0,t.pipe()})})}}}),n.directive("stClearKey",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(n,e,t,o){e.on("keydown",function(t){var i=o[1],r=o[0];return 13===t.which?r.pipe():27===t.which?void 0!==e.context.attributes["st-search"]?n.$apply(function(){var n=e.context.attributes["st-search"].value,t=r.tableState();return t.search.predicateObject[n]="",r.pipe()}):n.$apply(function(){i.$setViewValue(null),i.$render()}):void 0})}}})}(),function(){angular.module("shared.components",[])}(),function(){function n(n,e){var t=this;t.$onInit=function(){n.get("api/publisher").then(function(n){t.publishers=n.data}).catch(function(n){console.log(n.message)})},t.create=function(){e.open({component:"publisherEdit",bindings:{modalInstance:"<"},size:"lg"}).result.then(function(n){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),console.info("returning result",n),t.publishers.unshift(n),t.id=n.id},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})},t.edit=function(){e.open({component:"publisherEdit",bindings:{modalInstance:"<"},resolve:{id:t.id},size:"lg"}).result.then(function(n){angular.forEach(t.publishers,function(e){e.id===t.id&&(angular.extend(e,n),t.id=e.id)})},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})}}var e=angular.module("shared.components");e.component("publisherList",{bindings:{id:"="},templateUrl:"app/common/publisher-list.component.html",controller:["$http","$uibModal",n]})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
