!function(){angular.module("app.services",[])}(),function(){"use strict";function n(n){function e(e){return n.get("api/product/"+e).then(function(n){return n.data}).catch(function(n){console.log(n.message)})}function o(e){return n.get("api/product",{params:e}).then(function(n){return n.data}).catch(function(n){console.log(n.message)})}function t(e){return e.id?n.put("api/product",e).then(function(n){return n.data}).catch(function(n){return n.message}):n.post("api/product",e).then(function(n){return n.data}).catch(function(n){return n.message})}return{getMedia:e,getAllMedia:o,save:t}}n.$inject=["$http"];angular.module("app.services").factory("ProductService",n)}(),function(){"use strict";var n=angular.module("app",["app.services","app.directives","shared.components","ngComponentRouter","ui.bootstrap","smart-table"]);n.component("libraryApp",{templateUrl:"/app/product-app.component.html",$routeConfig:[{path:"/",name:"List",component:"list",useAsDefault:!0}]}),n.value("$routerRootComponent","libraryApp")}(),function(){function n(n){var e=this;e.cancel=function(){e.dismiss()},e.save=function(){return n.post("api/publisher",e.publisher).then(function(n){angular.extend(e.publisher,n.data)}).catch(function(n){console.log("Error saving publisher",n.message)}).finally(function(){console.log("edit publisher",e.publisher),e.modalInstance.close(e.publisher)})}}var e=angular.module("app");e.component("publisherEdit",{bindings:{resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/publisher/publisher-edit.component.html",controller:["$http",n]})}(),function(){function n(n){var e=this;e.$onInit=function(){console.log("summary active"),e.resolve&&(e.id=e.resolve.id,e.asModal=e.resolve.asModal,e.addStaffVisible=!1),n.getMedia(e.id).then(function(n){e.media=n})},e.createStaff=function(){console.log("add staff modal")},e.cancel=function(){e.dismiss()}}var e=angular.module("app");e.component("mediaSummary",{bindings:{id:"<",asModal:"<",resolve:"<",close:"&",dismiss:"&"},templateUrl:"app/product/product-summary.component.html",controller:["ProductService",n]})}(),function(){"use strict";function n(n,e){var o,t=this,i=10;t.searchModel={page:1,pageSize:i},t.$onInit=function(){},t.search=function(n){o=n,e.getAllMedia(t.searchModel).then(function(n){t.media=n.results,t.searchModel=n,delete t.searchModel.results})},t.paged=function(){t.search(o)},t.edit=function(e){angular.copy(e);n.open({component:"mediaEdit",bindings:{modalInstance:"<"},resolve:{id:e.id},size:"lg"}).result.then(function(n){angular.extend(e,n)},function(n){})},t.create=function(){n.open({component:"mediaEdit",bindings:{modalInstance:"<"},size:"lg"}).result.then(function(n){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),console.info("returning result",n),t.media.unshift(n)},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})},t.showDetails=function(e){n.open({component:"mediaSummary",bindings:{modalInstance:"<"},resolve:{id:e,asModal:!0},size:"lg"}).result.then(function(n){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),console.info(n)},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})}}var e=angular.module("app");e.component("list",{templateUrl:"app/product/product-list.component.html",controller:["$uibModal","ProductService",n]})}(),function(){function n(n){var e=this;e.$onInit=function(){e.resolve&&(e.id=e.resolve.id),e.id&&n.getMedia(e.id).then(function(n){e.media=n}),console.log("media edit active",e)},e.cancel=function(){e.dismiss()},e.save=function(){return n.save(e.media).then(function(n){angular.extend(e.media,n)}).catch(function(n){console.log("Error saving product",n.message)}).finally(function(){e.modalInstance.close(e.media)})}}var e=angular.module("app");e.component("mediaEdit",{templateUrl:"app/product/product-edit.component.html",bindings:{id:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},controller:["ProductService",n]})}(),function(){angular.module("app.directives",[]).directive("stSubmitSearch",["stConfig","$timeout","$parse",function(n,e,o){return{require:"^stTable",link:function(n,e,o,t){return e.bind("click",function(){var n=t;n.pipe()})}}}])}(),function(){angular.module("shared.components",[])}(),function(){function n(n,e){var o=this;o.$onInit=function(){n.get("api/publisher").then(function(n){o.publishers=n.data}).catch(function(n){console.log(n.message)})},o.create=function(){e.open({component:"publisherEdit",bindings:{modalInstance:"<"},size:"lg"}).result.then(function(n){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),console.info("returning result",n),o.publishers.unshift(n),o.id=n.id},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})}}var e=angular.module("shared.components");e.component("publisherList",{bindings:{id:"="},templateUrl:"app/common/publisher-list.component.html",controller:["$http","$uibModal",n]})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL3NlcnZpY2VzLm1vZHVsZS5qcyIsInNlcnZpY2VzL3Byb2R1Y3Quc2VydmljZS5qcyIsInByb2R1Y3QtYXBwLm1vZHVsZS5qcyIsInB1Ymxpc2hlci9wdWJsaXNoZXItZWRpdC5jb21wb25lbnQuanMiLCJwcm9kdWN0L3Byb2R1Y3Qtc3VtbWFyeS5jb21wb25lbnQuanMiLCJwcm9kdWN0L3Byb2R1Y3QtbGlzdC5jb21wb25lbnQuanMiLCJwcm9kdWN0L3Byb2R1Y3QtZWRpdC5jb21wb25lbnQuanMiLCJkaXJlY3RpdmVzL2RpcmVjdGl2ZXMubW9kdWxlcy5qcyIsImNvbW1vbi9hcHAtY29tcG9uZW50cy5tb2R1bGUuanMiLCJjb21tb24vcHVibGlzaGVyLWxpc3QuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJtZWRpYVNlcnZpY2UiLCIkaHR0cCIsImdldE1lZGlhIiwiaWQiLCJnZXQiLCJ0aGVuIiwiciIsImRhdGEiLCJjYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJtZXNzYWdlIiwiZ2V0QWxsTWVkaWEiLCJzZWFyY2hNb2RlbCIsInBhcmFtcyIsInNhdmUiLCJtZWRpYSIsInB1dCIsInBvc3QiLCJmYWN0b3J5IiwiY29tcG9uZW50IiwidGVtcGxhdGVVcmwiLCIkcm91dGVDb25maWciLCJwYXRoIiwibmFtZSIsInVzZUFzRGVmYXVsdCIsInZhbHVlIiwiY29udHJvbGxlciIsIiRjdHJsIiwidGhpcyIsImNhbmNlbCIsImRpc21pc3MiLCJwdWJsaXNoZXIiLCJleHRlbmQiLCJmaW5hbGx5IiwibW9kYWxJbnN0YW5jZSIsImNsb3NlIiwiYmluZGluZ3MiLCJyZXNvbHZlIiwic2VydmljZSIsIiRvbkluaXQiLCJhc01vZGFsIiwiYWRkU3RhZmZWaXNpYmxlIiwiY3JlYXRlU3RhZmYiLCIkdWliTW9kYWwiLCJ0YWJsZVN0YXRlUmVmIiwicGFnZVNpemVEZWZhdWx0IiwicGFnZSIsInBhZ2VTaXplIiwic2VhcmNoIiwidGFibGVTdGF0ZSIsInJlc3VsdHMiLCJwYWdlZCIsImVkaXQiLCJpdGVtIiwiY29weSIsIm9wZW4iLCJzaXplIiwicmVzdWx0IiwicmVhc29uIiwiY3JlYXRlIiwiaW5mbyIsInVuc2hpZnQiLCJzaG93RGV0YWlscyIsImRpcmVjdGl2ZSIsInN0Q29uZmlnIiwiJHRpbWVvdXQiLCIkcGFyc2UiLCJyZXF1aXJlIiwibGluayIsInNjb3BlIiwiZWxlbWVudCIsImF0dHIiLCJjdHJsIiwiYmluZCIsInRhYmxlQ3RybCIsInBpcGUiLCJwdWJsaXNoZXJzIl0sIm1hcHBpbmdzIjoiQ0FDQSxXQUNxQkEsUUFBUUMsT0FBTyxzQkNEcEMsV0FDSSxZQUdBLFNBQVNDLEdBQWFDLEdBUWxCLFFBQVNDLEdBQVNDLEdBQ2QsTUFBT0YsR0FBTUcsSUFBSSxlQUFpQkQsR0FBSUUsS0FBSyxTQUFVQyxHQUNqRCxNQUFPQSxHQUFFQyxPQUNWQyxNQUFNLFNBQVVDLEdBQ2ZDLFFBQVFDLElBQUlGLEVBQUlHLFdBSXhCLFFBQVNDLEdBQVlDLEdBQ2pCLE1BQU9iLEdBQU1HLElBQUksZUFBaUJXLE9BQVFELElBQWVULEtBQUssU0FBVUMsR0FDcEUsTUFBT0EsR0FBRUMsT0FDVkMsTUFBTSxTQUFVQyxHQUNmQyxRQUFRQyxJQUFJRixFQUFJRyxXQUl4QixRQUFTSSxHQUFLQyxHQUNWLE1BQUlBLEdBQU1kLEdBQ0NGLEVBQU1pQixJQUFJLGNBQWVELEdBQU9aLEtBQUssU0FBU0MsR0FDakQsTUFBT0EsR0FBRUMsT0FDVkMsTUFBTSxTQUFTQyxHQUNkLE1BQU9BLEdBQUlHLFVBR1JYLEVBQU1rQixLQUFLLGNBQWVGLEdBQU9aLEtBQUssU0FBVUMsR0FDbkQsTUFBT0EsR0FBRUMsT0FDVkMsTUFBTSxTQUFVQyxHQUNmLE1BQU9BLEdBQUlHLFVBakN2QixPQUNJVixTQUFVQSxFQUNWVyxZQUFhQSxFQUNiRyxLQUFNQSxzQkFQRGxCLFNBQVFDLE9BQU8sZ0JBQWdCcUIsUUFBUSxpQkFBa0JwQixNQ0YxRSxXQUNJLFlB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T0FBTyxxQkFBc0JrRSxVQUFVLGtCQUFtQixXQUFZLFdBQVksU0FBVSxTQUFVQyxFQUFVQyxFQUFVQyxHQUM5SCxPQUNJQyxRQUFTLFdBQ1RDLEtBQU0sU0FBVUMsRUFBT0MsRUFBU0MsRUFBTUMsR0FDbEMsTUFBT0YsR0FBUUcsS0FBSyxRQUNoQixXQUNJLEdBQUlDLEdBQVlGLENBQ2hCRSxHQUFVQyxpQkNUbEMsV0FDcUIvRSxRQUFRQyxPQUFPLDJCQ0RwQyxXQUlJLFFBQVM2QixHQUFXM0IsRUFBTzRDLEdBQ3ZCLEdBQUloQixHQUFRQyxJQUVaRCxHQUFNWSxRQUFVLFdBQ1p4QyxFQUFNRyxJQUFJLGlCQUFpQkMsS0FBSyxTQUFVQyxHQUN0Q3VCLEVBQU1pRCxXQUFheEUsRUFBRUMsT0FDdEJDLE1BQU0sU0FBVUMsR0FDZkMsUUFBUUMsSUFBSUYsRUFBSUcsWUFJeEJpQixFQUFNZ0MsT0FBUyxXQUNYaEIsRUFBVVksTUFDTnBDLFVBQVcsZ0JBQ1hpQixVQUNJRixjQUFlLEtBRW5Cc0IsS0FBTSxPQUNQQyxPQUFPdEQsS0FBSyxTQUFVc0QsR0FDckJqRCxRQUFRb0QsS0FBSyxtRkFDYnBELFFBQVFvRCxLQUFLLG1CQUFvQkgsR0FDakM5QixFQUFNaUQsV0FBV2YsUUFBUUosR0FDekI5QixFQUFNMUIsR0FBS3dELEVBQU94RCxJQUNuQixTQUFVeUQsR0FDVGxELFFBQVFvRCxLQUFLLG9GQUFzRkYsTUExQi9HLEdBQUk3RCxHQUFTRCxRQUFRQyxPQUFPLG9CQStCNUJBLEdBQU9zQixVQUFVLGlCQUViaUIsVUFDSW5DLEdBQUksS0FFUm1CLFlBQWEsMkNBQ2JNLFlBQWEsUUFBUyxZQUFhQSIsImZpbGUiOiJtb2R1bGVzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vc2VydmljZXMubW9kdWxlLmpzXHJcbihmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2FwcC5zZXJ2aWNlcycsIFtdKTtcclxuICAgIH1cclxuKSgpOyIsIi8vcHJvZHVjdC5zZXJ2aWNlLmpzXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2FwcC5zZXJ2aWNlcycpLmZhY3RvcnkoJ1Byb2R1Y3RTZXJ2aWNlJywgbWVkaWFTZXJ2aWNlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBtZWRpYVNlcnZpY2UoJGh0dHApIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0TWVkaWE6IGdldE1lZGlhLFxyXG4gICAgICAgICAgICBnZXRBbGxNZWRpYTogZ2V0QWxsTWVkaWEsXHJcbiAgICAgICAgICAgIHNhdmU6IHNhdmVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRNZWRpYShpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCdhcGkvcHJvZHVjdC8nICsgaWQpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByLmRhdGE7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRBbGxNZWRpYShzZWFyY2hNb2RlbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCdhcGkvcHJvZHVjdCcsIHsgcGFyYW1zOiBzZWFyY2hNb2RlbCB9KS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gci5kYXRhO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2F2ZShtZWRpYSkge1xyXG4gICAgICAgICAgICBpZiAobWVkaWEuaWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5wdXQoJ2FwaS9wcm9kdWN0JywgbWVkaWEpLnRoZW4oZnVuY3Rpb24ocikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByLmRhdGE7XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCdhcGkvcHJvZHVjdCcsIG1lZGlhKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuZGF0YTtcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG59XHJcbikoKTsiLCIvL3Byb2R1Y3QtYXBwLm1vZHVsZS5qc1xyXG4oZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLFxyXG4gICAgW1xyXG4gICAgICAgICdhcHAuc2VydmljZXMnLFxyXG4gICAgICAgICdhcHAuZGlyZWN0aXZlcycsXHJcbiAgICAgICAgJ3NoYXJlZC5jb21wb25lbnRzJyxcclxuICAgICAgICAnbmdDb21wb25lbnRSb3V0ZXInLFxyXG4gICAgICAgICd1aS5ib290c3RyYXAnLFxyXG4gICAgICAgICdzbWFydC10YWJsZSdcclxuICAgIF0pO1xyXG5cclxuICAgIC8vbW9kdWxlLmNvbmZpZyhmdW5jdGlvbiAoKSB7Ly8kbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7IH0pO1xyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ2xpYnJhcnlBcHAnLFxyXG4gICAge1xyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnL2FwcC9wcm9kdWN0LWFwcC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgJHJvdXRlQ29uZmlnOiBbXHJcbiAgICAgICAgICAgIHsgcGF0aDogJy8nLCBuYW1lOiAnTGlzdCcsIGNvbXBvbmVudDogJ2xpc3QnLCB1c2VBc0RlZmF1bHQ6IHRydWUgfVxyXG4gICAgICAgIF1cclxuICAgIH0pO1xyXG5cclxuICAgIG1vZHVsZS52YWx1ZSgnJHJvdXRlclJvb3RDb21wb25lbnQnLCAnbGlicmFyeUFwcCcpO1xyXG5cclxufSkoKTsiLCIvL3B1Ymxpc2hlci1lZGl0LmNvbXBvbmVudC5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKCRodHRwKSB7XHJcbiAgICAgICAgdmFyICRjdHJsID0gdGhpcztcclxuXHJcbiAgICAgICAgJGN0cmwuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkY3RybC5kaXNtaXNzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5zYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnYXBpL3B1Ymxpc2hlcicsICRjdHJsLnB1Ymxpc2hlcikudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoJGN0cmwucHVibGlzaGVyLCByLmRhdGEpO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3Igc2F2aW5nIHB1Ymxpc2hlcicsIGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZWRpdCBwdWJsaXNoZXInLCAkY3RybC5wdWJsaXNoZXIpO1xyXG4gICAgICAgICAgICAgICAgJGN0cmwubW9kYWxJbnN0YW5jZS5jbG9zZSgkY3RybC5wdWJsaXNoZXIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ3B1Ymxpc2hlckVkaXQnLFxyXG4gICAge1xyXG4gICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgIHJlc29sdmU6ICc8JyxcclxuICAgICAgICAgICAgY2xvc2U6ICcmJyxcclxuICAgICAgICAgICAgZGlzbWlzczogJyYnLFxyXG4gICAgICAgICAgICBtb2RhbEluc3RhbmNlOiAnPCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3B1Ymxpc2hlci9wdWJsaXNoZXItZWRpdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogWyckaHR0cCcsIGNvbnRyb2xsZXJdXHJcbiAgICB9KTtcclxuXHJcbn1cclxuKSgpOyIsIi8vcHJvZHVjdC1zdW1tYXJ5LmNvbXBvbmVudC5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKHNlcnZpY2UpIHtcclxuICAgICAgICB2YXIgJGN0cmwgPSB0aGlzO1xyXG5cclxuICAgICAgICAkY3RybC4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc3VtbWFyeSBhY3RpdmUnKTtcclxuICAgICAgICAgICAgaWYgKCRjdHJsLnJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLmlkID0gJGN0cmwucmVzb2x2ZS5pZDtcclxuICAgICAgICAgICAgICAgICRjdHJsLmFzTW9kYWwgPSAkY3RybC5yZXNvbHZlLmFzTW9kYWw7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5hZGRTdGFmZlZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VydmljZS5nZXRNZWRpYSgkY3RybC5pZCkudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwubWVkaWEgPSByO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmNyZWF0ZVN0YWZmID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhZGQgc3RhZmYgbW9kYWwnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGN0cmwuZGlzbWlzcygpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgbW9kdWxlLmNvbXBvbmVudCgnbWVkaWFTdW1tYXJ5JyxcclxuICAgIHtcclxuICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICBpZDogJzwnLFxyXG4gICAgICAgICAgICBhc01vZGFsOiAnPCcsXHJcbiAgICAgICAgICAgIHJlc29sdmU6ICc8JyxcclxuICAgICAgICAgICAgY2xvc2U6ICcmJyxcclxuICAgICAgICAgICAgZGlzbWlzczogJyYnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9wcm9kdWN0L3Byb2R1Y3Qtc3VtbWFyeS5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogWydQcm9kdWN0U2VydmljZScsIGNvbnRyb2xsZXJdXHJcbiAgICB9KTtcclxuXHJcbn1cclxuKSgpOyIsIi8vcHJvZHVjdC1saXN0LmNvbXBvbmVudC5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJyk7XHJcblxyXG4gICAgZnVuY3Rpb24gY29udHJvbGxlcigkdWliTW9kYWwsIHNlcnZpY2UpIHtcclxuICAgICAgICB2YXIgJGN0cmwgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwYWdlU2l6ZURlZmF1bHQgPSAxMDtcclxuICAgICAgICB2YXIgdGFibGVTdGF0ZVJlZjtcclxuXHJcbiAgICAgICAgJGN0cmwuc2VhcmNoTW9kZWwgPSB7XHJcbiAgICAgICAgICAgIHBhZ2U6IDEsXHJcbiAgICAgICAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZURlZmF1bHRcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkY3RybC4kb25Jbml0ID0gZnVuY3Rpb24gKCkge31cclxuXHJcbiAgICAgICAgJGN0cmwuc2VhcmNoID0gZnVuY3Rpb24gKHRhYmxlU3RhdGUpIHtcclxuICAgICAgICAgICAgdGFibGVTdGF0ZVJlZiA9IHRhYmxlU3RhdGU7XHJcblxyXG4gICAgICAgICAgICBzZXJ2aWNlLmdldEFsbE1lZGlhKCRjdHJsLnNlYXJjaE1vZGVsKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5tZWRpYSA9IHIucmVzdWx0cztcclxuICAgICAgICAgICAgICAgICRjdHJsLnNlYXJjaE1vZGVsID0gcjtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSAkY3RybC5zZWFyY2hNb2RlbC5yZXN1bHRzO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLnBhZ2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkY3RybC5zZWFyY2godGFibGVTdGF0ZVJlZik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5lZGl0ID0gZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWRNZWRpYSA9IGFuZ3VsYXIuY29weShpdGVtKTsgXHJcbiAgICAgICAgICAgICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ21lZGlhRWRpdCcsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2U6IFwiPFwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLmlkXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2l6ZTogJ2xnJ1xyXG4gICAgICAgICAgICB9KS5yZXN1bHQudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUuaW5mbyhcIkkgd2FzIGNsb3NlZCwgc28gZG8gd2hhdCBJIG5lZWQgdG8gZG8gbXlDb250ZW50J3MgY29udHJvbGxlciBub3cuICBSZXN1bHQgd2FzLT5cIik7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZChpdGVtLCByZXN1bHQpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUuaW5mbyhcIkkgd2FzIGRpbWlzc2VkLCBzbyBkbyB3aGF0IEkgbmVlZCB0byBkbyBteUNvbnRlbnQncyBjb250cm9sbGVyIG5vdy4gIFJlYXNvbiB3YXMtPlwiICsgcmVhc29uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ21lZGlhRWRpdCcsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2U6IFwiPFwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2l6ZTogJ2xnJ1xyXG4gICAgICAgICAgICB9KS5yZXN1bHQudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXCJJIHdhcyBjbG9zZWQsIHNvIGRvIHdoYXQgSSBuZWVkIHRvIGRvIG15Q29udGVudCdzIGNvbnRyb2xsZXIgbm93LiAgUmVzdWx0IHdhcy0+XCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCdyZXR1cm5pbmcgcmVzdWx0JywgcmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICRjdHJsLm1lZGlhLnVuc2hpZnQocmVzdWx0KTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiSSB3YXMgZGltaXNzZWQsIHNvIGRvIHdoYXQgSSBuZWVkIHRvIGRvIG15Q29udGVudCdzIGNvbnRyb2xsZXIgbm93LiAgUmVhc29uIHdhcy0+XCIgKyByZWFzb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLnNob3dEZXRhaWxzID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgICAgICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ21lZGlhU3VtbWFyeScsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2U6IFwiPFwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBpZCxcclxuICAgICAgICAgICAgICAgICAgICBhc01vZGFsOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2l6ZTogJ2xnJ1xyXG4gICAgICAgICAgICB9KS5yZXN1bHQudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXCJJIHdhcyBjbG9zZWQsIHNvIGRvIHdoYXQgSSBuZWVkIHRvIGRvIG15Q29udGVudCdzIGNvbnRyb2xsZXIgbm93LiAgUmVzdWx0IHdhcy0+XCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkkgd2FzIGRpbWlzc2VkLCBzbyBkbyB3aGF0IEkgbmVlZCB0byBkbyBteUNvbnRlbnQncyBjb250cm9sbGVyIG5vdy4gIFJlYXNvbiB3YXMtPlwiICsgcmVhc29uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBtb2R1bGUuY29tcG9uZW50KCdsaXN0JyxcclxuICAgIHtcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9wcm9kdWN0L3Byb2R1Y3QtbGlzdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogWyckdWliTW9kYWwnLCAnUHJvZHVjdFNlcnZpY2UnLCBjb250cm9sbGVyXVxyXG4gICAgfSk7XHJcblxyXG59XHJcbikoKTsiLCIvL3Byb2R1Y3QtZWRpdC5jb21wb25lbnQuanNcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJyk7XHJcblxyXG4gICAgZnVuY3Rpb24gY29udHJvbGxlcihzZXJ2aWNlKSB7XHJcbiAgICAgICAgdmFyICRjdHJsID0gdGhpcztcclxuXHJcbiAgICAgICAgJGN0cmwuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCRjdHJsLnJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLmlkID0gJGN0cmwucmVzb2x2ZS5pZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoJGN0cmwuaWQpIHtcclxuICAgICAgICAgICAgICAgIHNlcnZpY2UuZ2V0TWVkaWEoJGN0cmwuaWQpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAkY3RybC5tZWRpYSA9IHI7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbWVkaWEgZWRpdCBhY3RpdmUnLCAkY3RybCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRjdHJsLmRpc21pc3MoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLnNhdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlLnNhdmUoJGN0cmwubWVkaWEpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRjdHJsLm1lZGlhLCByKTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIHNhdmluZyBwcm9kdWN0JywgZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLm1vZGFsSW5zdGFuY2UuY2xvc2UoJGN0cmwubWVkaWEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ21lZGlhRWRpdCcsXHJcbiAgICB7XHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvcHJvZHVjdC9wcm9kdWN0LWVkaXQuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgIGlkOiAnPCcsXHJcbiAgICAgICAgICAgIHJlc29sdmU6ICc8JyxcclxuICAgICAgICAgICAgY2xvc2U6ICcmJyxcclxuICAgICAgICAgICAgZGlzbWlzczogJyYnLFxyXG4gICAgICAgICAgICBtb2RhbEluc3RhbmNlOiAnPCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IFsnUHJvZHVjdFNlcnZpY2UnLCBjb250cm9sbGVyXVxyXG4gICAgfSk7XHJcbn0pKCk7XHJcbiAgICAiLCIvL2RpcmVjdGl2ZXMubW9kdWxlcy5qc1xyXG4oZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcC5kaXJlY3RpdmVzJywgW10pLmRpcmVjdGl2ZSgnc3RTdWJtaXRTZWFyY2gnLCBbJ3N0Q29uZmlnJywgJyR0aW1lb3V0JywgJyRwYXJzZScsIGZ1bmN0aW9uIChzdENvbmZpZywgJHRpbWVvdXQsICRwYXJzZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlcXVpcmU6ICdec3RUYWJsZScsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuYmluZCgnY2xpY2snLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlQ3RybCA9IGN0cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5waXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuXHJcblxyXG59KSgpOyIsIi8vc2hhcmVkLWNvbXBvbmVudHMubW9kdWxlLmpzXHJcbihmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3NoYXJlZC5jb21wb25lbnRzJywgW10pO1xyXG4gICAgfVxyXG4pKCk7IiwiLy9wdWJsaXNoZXItbGlzdC5jb21wb25lbnQuanNcclxuKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3NoYXJlZC5jb21wb25lbnRzJyk7XHJcblxyXG4gICAgZnVuY3Rpb24gY29udHJvbGxlcigkaHR0cCwgJHVpYk1vZGFsKSB7XHJcbiAgICAgICAgdmFyICRjdHJsID0gdGhpcztcclxuXHJcbiAgICAgICAgJGN0cmwuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGh0dHAuZ2V0KCdhcGkvcHVibGlzaGVyJykudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwucHVibGlzaGVycyA9IHIuZGF0YTsgXHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICRjdHJsLmNyZWF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICdwdWJsaXNoZXJFZGl0JyxcclxuICAgICAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZTogXCI8XCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaXplOiAnbGcnXHJcbiAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkkgd2FzIGNsb3NlZCwgc28gZG8gd2hhdCBJIG5lZWQgdG8gZG8gbXlDb250ZW50J3MgY29udHJvbGxlciBub3cuICBSZXN1bHQgd2FzLT5cIik7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ3JldHVybmluZyByZXN1bHQnLCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgJGN0cmwucHVibGlzaGVycy51bnNoaWZ0KHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5pZCA9IHJlc3VsdC5pZDsgXHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkkgd2FzIGRpbWlzc2VkLCBzbyBkbyB3aGF0IEkgbmVlZCB0byBkbyBteUNvbnRlbnQncyBjb250cm9sbGVyIG5vdy4gIFJlYXNvbiB3YXMtPlwiICsgcmVhc29uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ3B1Ymxpc2hlckxpc3QnLFxyXG4gICAge1xyXG4gICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgIGlkOiAnPSdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL2NvbW1vbi9wdWJsaXNoZXItbGlzdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogWyckaHR0cCcsICckdWliTW9kYWwnLCBjb250cm9sbGVyXVxyXG4gICAgfSk7XHJcblxyXG5cclxufVxyXG4pKCk7Il19
