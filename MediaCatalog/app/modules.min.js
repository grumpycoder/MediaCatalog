//app-directives.modules.js
(function() {

    angular.module('app.directives', []).directive('stSubmitSearch', ['stConfig', '$timeout', '$parse', function (stConfig, $timeout, $parse) {
        return {
            require: '^stTable',
            link: function (scope, element, attr, ctrl) {
                return element.bind('click',
                    function () {
                        var tableCtrl = ctrl;
                        tableCtrl.pipe();
                    });

            }
        };
    }]);


})();
//app.module.js
(function() {
    'use strict';

    var module = angular.module('media',
    [
        'app.service',
        'app.directives', 
        'ngComponentRouter',
        'ui.bootstrap',
        'smart-table'
    ]);

    //module.config(function () {//$locationProvider.html5Mode(true); });

    module.component('mediaApp',
    {
        templateUrl: '/app/media/media-app.component.html',
        $routeConfig: [
            { path: '/', name: 'List', component: 'list', useAsDefault: true }
            //{ path: '/:id', name: 'Details', component: 'detail' },
            //{ path: '/edit/:id', name: 'Edit', component: 'edit' },
            //{ path: '/create', name: 'Create', component: 'create' }
        ]
    });

    module.value('$routerRootComponent', 'mediaApp');

})();
//media-list.component.js
(function () {
    'use strict';

    var module = angular.module('media');

    function controller($uibModal, service) {
        var $ctrl = this;
        var pageSizeDefault = 10;
        var tableStateRef;

        $ctrl.searchModel = {
            page: 1,
            pageSize: pageSizeDefault
        };

        $ctrl.$onInit = function () {
        }

        $ctrl.search = function (tableState) {
            tableStateRef = tableState;

            service.getAllMedia($ctrl.searchModel).then(function (r) {
                $ctrl.media = r.results;
                $ctrl.searchModel = r;
                delete $ctrl.searchModel.results;
            });
        }

        $ctrl.paged = function () {
            $ctrl.search(tableStateRef);
        }

        $ctrl.showDetails = function (id) {
            $uibModal.open({
                component: 'mediaSummary',
                bindings: {
                    modalInstance: "<"
                },
                resolve: {
                    id: id,
                    asModal: true
                },
                size: 'lg'
            }).result.then(function (result) {
                console.info("I was closed, so do what I need to do myContent's controller now.  Result was->");
                console.info(result);
            }, function (reason) {
                console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->" + reason);
            });
        }
    }

    module.component('list',
    {
        templateUrl: 'app/media/media-list.component.html',
        controller: ['$uibModal', 'MediaService', controller]
    });

}
)();
//media-summary.component.js
(function () {
    var module = angular.module('media');

    function controller(service) {
        var $ctrl = this;

        $ctrl.$onInit = function () {
            console.log('summary active');
            if ($ctrl.resolve) {
                $ctrl.id = $ctrl.resolve.id;
                $ctrl.asModal = $ctrl.resolve.asModal;
            }

            service.getMedia($ctrl.id).then(function (r) {
                $ctrl.media = r;
            });
        }

        $ctrl.cancel = function () {
            $ctrl.dismiss();
        };
    }

    module.component('mediaSummary',
    {
        bindings: {
            id: '<',
            asModal: '<',
            resolve: '<',
            close: '&',
            dismiss: '&'
        },
        templateUrl: 'app/media/media-summary.component.html',
        controller: ['MediaService', controller]
    });

}
)();
//app.service.js
(function() {
        var module = angular.module('app.service', []);
    }
)();
//media.service.js
(function () {
    'use strict';
    mediaService.$inject = ["$http"];
    var module = angular.module('app.service').factory('MediaService', mediaService);

    function mediaService($http) {

        return {
            getMedia: getMedia, 
            getAllMedia: getAllMedia
        };

        function getMedia(id) {
            return $http.get('api/media/' + id).then(function (r) {
                console.log('data', r.data);
                return r.data;
            }).catch(function (err) {
                console.log(err.message);
            });
        }

        function getAllMedia(searchModel) {
            return $http.get('api/media', { params: searchModel }).then(function (r) {
                return r.data;
            }).catch(function (err) {
                console.log(err.message);
            });
        }
    }

}
)();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
