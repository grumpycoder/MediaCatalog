!function(){angular.module("app.directives",[]).directive("stSubmitSearch",["stConfig","$timeout","$parse",function(e,n,t){return{require:"^stTable",link:function(e,n,t,o){return n.bind("click",function(){var e=o;e.pipe()})}}}])}(),function(){"use strict";var e=angular.module("media",["app.service","app.directives","ngComponentRouter","ui.bootstrap","smart-table"]);e.component("mediaApp",{templateUrl:"/app/media/media-app.component.html",$routeConfig:[{path:"/",name:"List",component:"list",useAsDefault:!0}]}),e.value("$routerRootComponent","mediaApp")}(),function(){"use strict";function e(e,n){var t,o=this,a=10;o.searchModel={page:1,pageSize:a},o.$onInit=function(){},o.search=function(e){t=e,n.getAllMedia(o.searchModel).then(function(e){o.media=e.results,o.searchModel=e,delete o.searchModel.results})},o.paged=function(){o.search(t)},o.showDetails=function(n){e.open({component:"mediaSummary",bindings:{modalInstance:"<"},resolve:{id:n,asModal:!0},size:"lg"}).result.then(function(e){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),console.info(e)},function(e){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+e)})}}var n=angular.module("media");n.component("list",{templateUrl:"app/media/media-list.component.html",controller:["$uibModal","MediaService",e]})}(),function(){function e(e){var n=this;n.$onInit=function(){console.log("summary active"),n.resolve&&(n.id=n.resolve.id,n.asModal=n.resolve.asModal),e.getMedia(n.id).then(function(e){n.media=e})},n.cancel=function(){n.dismiss()}}var n=angular.module("media");n.component("mediaSummary",{bindings:{id:"<",asModal:"<",resolve:"<",close:"&",dismiss:"&"},templateUrl:"app/media/media-summary.component.html",controller:["MediaService",e]})}(),function(){angular.module("app.service",[])}(),function(){"use strict";function e(e){function n(n){return e.get("api/media/"+n).then(function(e){return e.data}).catch(function(e){console.log(e.message)})}function t(n){return e.get("api/media",{params:n}).then(function(e){return e.data}).catch(function(e){console.log(e.message)})}return{getMedia:n,getAllMedia:t}}e.$inject=["$http"];angular.module("app.service").factory("MediaService",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvYXBwLWRpcmVjdGl2ZXMubW9kdWxlcy5qcyIsIm1lZGlhL21lZGlhLWFwcC5tb2R1bGUuanMiLCJtZWRpYS9tZWRpYS1saXN0LmNvbXBvbmVudC5qcyIsIm1lZGlhL21lZGlhLXN1bW1hcnkuY29tcG9uZW50LmpzIiwic2VydmljZXMvYXBwLXNlcnZpY2UubW9kdWxlLmpzIiwic2VydmljZXMvbWVkaWEuc2VydmljZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiZGlyZWN0aXZlIiwic3RDb25maWciLCIkdGltZW91dCIsIiRwYXJzZSIsInJlcXVpcmUiLCJsaW5rIiwic2NvcGUiLCJlbGVtZW50IiwiYXR0ciIsImN0cmwiLCJiaW5kIiwidGFibGVDdHJsIiwicGlwZSIsImNvbXBvbmVudCIsInRlbXBsYXRlVXJsIiwiJHJvdXRlQ29uZmlnIiwicGF0aCIsIm5hbWUiLCJ1c2VBc0RlZmF1bHQiLCJ2YWx1ZSIsImNvbnRyb2xsZXIiLCIkdWliTW9kYWwiLCJzZXJ2aWNlIiwidGFibGVTdGF0ZVJlZiIsIiRjdHJsIiwidGhpcyIsInBhZ2VTaXplRGVmYXVsdCIsInNlYXJjaE1vZGVsIiwicGFnZSIsInBhZ2VTaXplIiwiJG9uSW5pdCIsInNlYXJjaCIsInRhYmxlU3RhdGUiLCJnZXRBbGxNZWRpYSIsInRoZW4iLCJyIiwibWVkaWEiLCJyZXN1bHRzIiwicGFnZWQiLCJzaG93RGV0YWlscyIsImlkIiwib3BlbiIsImJpbmRpbmdzIiwibW9kYWxJbnN0YW5jZSIsInJlc29sdmUiLCJhc01vZGFsIiwic2l6ZSIsInJlc3VsdCIsImNvbnNvbGUiLCJpbmZvIiwicmVhc29uIiwibG9nIiwiZ2V0TWVkaWEiLCJjYW5jZWwiLCJkaXNtaXNzIiwiY2xvc2UiLCJtZWRpYVNlcnZpY2UiLCIkaHR0cCIsImdldCIsImRhdGEiLCJjYXRjaCIsImVyciIsIm1lc3NhZ2UiLCJwYXJhbXMiLCJmYWN0b3J5Il0sIm1hcHBpbmdzIjoiQ0FDQSxX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cy5qc1xyXG4oZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcC5kaXJlY3RpdmVzJywgW10pLmRpcmVjdGl2ZSgnc3RTdWJtaXRTZWFyY2gnLCBbJ3N0Q29uZmlnJywgJyR0aW1lb3V0JywgJyRwYXJzZScsIGZ1bmN0aW9uIChzdENvbmZpZywgJHRpbWVvdXQsICRwYXJzZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlcXVpcmU6ICdec3RUYWJsZScsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuYmluZCgnY2xpY2snLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlQ3RybCA9IGN0cmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ3RybC5waXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuXHJcblxyXG59KSgpOyIsIi8vYXBwLm1vZHVsZS5qc1xyXG4oZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdtZWRpYScsXHJcbiAgICBbXHJcbiAgICAgICAgJ2FwcC5zZXJ2aWNlJyxcclxuICAgICAgICAnYXBwLmRpcmVjdGl2ZXMnLCBcclxuICAgICAgICAnbmdDb21wb25lbnRSb3V0ZXInLFxyXG4gICAgICAgICd1aS5ib290c3RyYXAnLFxyXG4gICAgICAgICdzbWFydC10YWJsZSdcclxuICAgIF0pO1xyXG5cclxuICAgIC8vbW9kdWxlLmNvbmZpZyhmdW5jdGlvbiAoKSB7Ly8kbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7IH0pO1xyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ21lZGlhQXBwJyxcclxuICAgIHtcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJy9hcHAvbWVkaWEvbWVkaWEtYXBwLmNvbXBvbmVudC5odG1sJyxcclxuICAgICAgICAkcm91dGVDb25maWc6IFtcclxuICAgICAgICAgICAgeyBwYXRoOiAnLycsIG5hbWU6ICdMaXN0JywgY29tcG9uZW50OiAnbGlzdCcsIHVzZUFzRGVmYXVsdDogdHJ1ZSB9XHJcbiAgICAgICAgICAgIC8veyBwYXRoOiAnLzppZCcsIG5hbWU6ICdEZXRhaWxzJywgY29tcG9uZW50OiAnZGV0YWlsJyB9LFxyXG4gICAgICAgICAgICAvL3sgcGF0aDogJy9lZGl0LzppZCcsIG5hbWU6ICdFZGl0JywgY29tcG9uZW50OiAnZWRpdCcgfSxcclxuICAgICAgICAgICAgLy97IHBhdGg6ICcvY3JlYXRlJywgbmFtZTogJ0NyZWF0ZScsIGNvbXBvbmVudDogJ2NyZWF0ZScgfVxyXG4gICAgICAgIF1cclxuICAgIH0pO1xyXG5cclxuICAgIG1vZHVsZS52YWx1ZSgnJHJvdXRlclJvb3RDb21wb25lbnQnLCAnbWVkaWFBcHAnKTtcclxuXHJcbn0pKCk7IiwiLy9tZWRpYS1saXN0LmNvbXBvbmVudC5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnbWVkaWEnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKCR1aWJNb2RhbCwgc2VydmljZSkge1xyXG4gICAgICAgIHZhciAkY3RybCA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHBhZ2VTaXplRGVmYXVsdCA9IDEwO1xyXG4gICAgICAgIHZhciB0YWJsZVN0YXRlUmVmO1xyXG5cclxuICAgICAgICAkY3RybC5zZWFyY2hNb2RlbCA9IHtcclxuICAgICAgICAgICAgcGFnZTogMSxcclxuICAgICAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplRGVmYXVsdFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRjdHJsLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5zZWFyY2ggPSBmdW5jdGlvbiAodGFibGVTdGF0ZSkge1xyXG4gICAgICAgICAgICB0YWJsZVN0YXRlUmVmID0gdGFibGVTdGF0ZTtcclxuXHJcbiAgICAgICAgICAgIHNlcnZpY2UuZ2V0QWxsTWVkaWEoJGN0cmwuc2VhcmNoTW9kZWwpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLm1lZGlhID0gci5yZXN1bHRzO1xyXG4gICAgICAgICAgICAgICAgJGN0cmwuc2VhcmNoTW9kZWwgPSByO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlICRjdHJsLnNlYXJjaE1vZGVsLnJlc3VsdHM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwucGFnZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRjdHJsLnNlYXJjaCh0YWJsZVN0YXRlUmVmKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLnNob3dEZXRhaWxzID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgICAgICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ21lZGlhU3VtbWFyeScsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2U6IFwiPFwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBpZCxcclxuICAgICAgICAgICAgICAgICAgICBhc01vZGFsOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2l6ZTogJ2xnJ1xyXG4gICAgICAgICAgICB9KS5yZXN1bHQudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXCJJIHdhcyBjbG9zZWQsIHNvIGRvIHdoYXQgSSBuZWVkIHRvIGRvIG15Q29udGVudCdzIGNvbnRyb2xsZXIgbm93LiAgUmVzdWx0IHdhcy0+XCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkkgd2FzIGRpbWlzc2VkLCBzbyBkbyB3aGF0IEkgbmVlZCB0byBkbyBteUNvbnRlbnQncyBjb250cm9sbGVyIG5vdy4gIFJlYXNvbiB3YXMtPlwiICsgcmVhc29uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ2xpc3QnLFxyXG4gICAge1xyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL21lZGlhL21lZGlhLWxpc3QuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IFsnJHVpYk1vZGFsJywgJ01lZGlhU2VydmljZScsIGNvbnRyb2xsZXJdXHJcbiAgICB9KTtcclxuXHJcbn1cclxuKSgpOyIsIi8vbWVkaWEtc3VtbWFyeS5jb21wb25lbnQuanNcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnbWVkaWEnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKHNlcnZpY2UpIHtcclxuICAgICAgICB2YXIgJGN0cmwgPSB0aGlzO1xyXG5cclxuICAgICAgICAkY3RybC4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc3VtbWFyeSBhY3RpdmUnKTtcclxuICAgICAgICAgICAgaWYgKCRjdHJsLnJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLmlkID0gJGN0cmwucmVzb2x2ZS5pZDtcclxuICAgICAgICAgICAgICAgICRjdHJsLmFzTW9kYWwgPSAkY3RybC5yZXNvbHZlLmFzTW9kYWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlcnZpY2UuZ2V0TWVkaWEoJGN0cmwuaWQpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLm1lZGlhID0gcjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRjdHJsLmRpc21pc3MoKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ21lZGlhU3VtbWFyeScsXHJcbiAgICB7XHJcbiAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgaWQ6ICc8JyxcclxuICAgICAgICAgICAgYXNNb2RhbDogJzwnLFxyXG4gICAgICAgICAgICByZXNvbHZlOiAnPCcsXHJcbiAgICAgICAgICAgIGNsb3NlOiAnJicsXHJcbiAgICAgICAgICAgIGRpc21pc3M6ICcmJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvbWVkaWEvbWVkaWEtc3VtbWFyeS5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogWydNZWRpYVNlcnZpY2UnLCBjb250cm9sbGVyXVxyXG4gICAgfSk7XHJcblxyXG59XHJcbikoKTsiLCIvL2FwcC5zZXJ2aWNlLmpzXHJcbihmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2FwcC5zZXJ2aWNlJywgW10pO1xyXG4gICAgfVxyXG4pKCk7IiwiLy9tZWRpYS5zZXJ2aWNlLmpzXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2FwcC5zZXJ2aWNlJykuZmFjdG9yeSgnTWVkaWFTZXJ2aWNlJywgbWVkaWFTZXJ2aWNlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBtZWRpYVNlcnZpY2UoJGh0dHApIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0TWVkaWE6IGdldE1lZGlhLCBcclxuICAgICAgICAgICAgZ2V0QWxsTWVkaWE6IGdldEFsbE1lZGlhXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TWVkaWEoaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnYXBpL21lZGlhLycgKyBpZCkudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHIuZGF0YTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEFsbE1lZGlhKHNlYXJjaE1vZGVsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJ2FwaS9tZWRpYScsIHsgcGFyYW1zOiBzZWFyY2hNb2RlbCB9KS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gci5kYXRhO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuKSgpOyJdfQ==
