!function(){"use strict";var r=angular.module("app",["ngStorage","app.directives","shared.components","ui.bootstrap","smart-table","cp.ngConfirm"]).config(["$localStorageProvider","$httpProvider",function(r,e){r.setKeyPrefix("mc-"),e.interceptors.push("AuthenticationInterceptor")}]);r.factory("AuthenticationInterceptor",["$localStorage","$window",function(r,e){var t=this;return t.request=function(e){return e.headers=e.headers||{},r.currentUser&&(e.headers.Authorization="Bearer "+r.currentUser.token),e},t.responseError=function(r){return console.log("response error",r),401!==r.status&&403!==r.status||(e.location="/account/login"),$q.reject(r)},t}])}();
!function(){angular.module("shared.components",[])}();
!function(){function n(){var n=this;n.$onInit=function(){console.log("modal",n)}}var o=angular.module("app");o.component("confirmationModal",{bindings:{},template:"yes or no",controller:[n]})}();
!function(){function n(n,o){var e=this;e.$onInit=function(){n.get("api/publisher").then(function(n){e.publishers=n.data}).catch(function(n){console.log(n.message)})},e.create=function(){o.open({component:"publisherEdit",bindings:{modalInstance:"<"},size:"lg"}).result.then(function(n){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),console.info("returning result",n),e.publishers.unshift(n),e.id=n.id},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})},e.edit=function(){o.open({component:"publisherEdit",bindings:{modalInstance:"<"},resolve:{id:e.id},size:"lg"}).result.then(function(n){angular.forEach(e.publishers,function(o){o.id===e.id&&(angular.extend(o,n),e.id=o.id)})},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})}}var o=angular.module("shared.components");o.component("publisherSelect",{bindings:{id:"="},templateUrl:"app/common/publisher-select.component.html",controller:["$http","$uibModal",n]})}();
!function(){angular.module("app.directives",[])}();
!function(){var e=angular.module("app.directives");e.directive("stSubmitSearch",["stConfig","$timeout","$parse",function(e,t,r){return{require:"^stTable",link:function(e,t,r,n){return t.bind("click",function(){var e=n;e.pipe()})}}}]),e.directive("clearKey",function(){return{restrict:"EA",require:"ngModel",link:function(e,t,r,n){t.on("keydown",function(t){27===t.which&&(n.$setViewValue(null),n.$render(),e.$apply())})}}}),e.directive("stResetSearch",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){return t.bind("click",function(){var t=n[1],r=n[0];return e.$apply(function(){angular.forEach(t.$viewValue,function(e,r){"page"===r.toLowerCase()&&(t.$viewValue[r]=1),Array.isArray(e)||_.includes(r.toLowerCase(),"page")||(t.$viewValue[r]=null)});var e=r.tableState();return e.search.predicateObject={},e.pagination.start=0,r.pipe()})})}}}),e.directive("stClearKey",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){t.on("keydown",function(r){var i=n[1],a=n[0];return 13===r.which?a.pipe():27===r.which?void 0!==t.context.attributes["st-search"]?e.$apply(function(){var e=t.context.attributes["st-search"].value,r=a.tableState();return r.search.predicateObject[e]="",a.pipe()}):e.$apply(function(){i.$setViewValue(null),i.$render()}):void 0})}}})}();
!function(){function t(t){var n=this;n.$onInit=function(){n.title="New Product",n.resolve&&(n.id=n.resolve.id),n.id&&t.getProduct(n.id).then(function(t){n.product=t,n.title=t.title})},n.cancel=function(){n.dismiss()},n.save=function(){return t.save(n.product).then(function(t){angular.extend(n.product,t),n.modalInstance.close(n.product)}).catch(function(t){console.log("Error saving product",t.message)}).finally(function(){})}}var n=angular.module("app");n.component("productEdit",{templateUrl:"app/product/product-edit.component.html",bindings:{id:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},controller:["Product",t]})}();
!function(){"use strict";function o(o,n,t,e){var s,c=this,i=10;c.searchModel={page:1,pageSize:i},c.$onInit=function(){console.log("product list init"),c.title="Product List",e.getToken()},c.search=function(o){s=o,console.log("search"),t.getAllProducts(c.searchModel).then(function(o){c.products=o.results,c.searchModel=o,delete c.searchModel.results})},c.paged=function(){c.search(s)},c.create=function(){o.open({component:"productEdit",bindings:{modalInstance:"<"},size:"md"}).result.then(function(o){c.products.unshift(o)},function(o){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+o)})},c.edit=function(n){o.open({component:"productEdit",bindings:{modalInstance:"<"},resolve:{id:n.id},size:"md"}).result.then(function(o){angular.extend(n,o)},function(o){})},c.delete=function(o){n({title:"Delete",content:"Are you sure you want to delete <br /><strong>"+o.title+"</strong>?",type:"red",buttons:{yes:{keys:["y"],action:function(n,e){t.remove(o.id).then(function(n){var t=c.products.indexOf(o);c.products.splice(t,1)})}},no:{keys:["N"],action:function(o,n){}}}})},c.showDetails=function(n){o.open({component:"productSummary",bindings:{modalInstance:"<"},resolve:{id:n.id,asModal:!0},size:"md"}).result.then(function(o){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),angular.extend(n,o)},function(o){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+o)})}}var n=angular.module("app");n.component("productList",{templateUrl:"app/product/product-list.component.html",controller:["$uibModal","$ngConfirm","Product","User",o]})}();
!function(){function o(o,n){var t=this;t.$onInit=function(){t.resolve&&(t.id=t.resolve.id,t.asModal=t.resolve.asModal,t.addStaffVisible=!1),n.getProduct(t.id).then(function(o){t.product=o})},t.edit=function(){o.open({component:"productEdit",bindings:{modalInstance:"<"},resolve:{id:t.product.id},size:"md"}).result.then(function(o){angular.extend(t.product,o)},function(o){})},t.showNewStaff=function(){o.open({component:"staffEdit",bindings:{modalInstance:"<"},resolve:{productId:t.id},size:"md"}).result.then(function(o){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),t.product.staff.unshift(o)},function(o){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+o)})},t.cancel=function(){t.modalInstance.close(t.product)}}var n=angular.module("app");n.component("productSummary",{bindings:{id:"<",asModal:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/product/product-summary.component.html",controller:["$uibModal","Product",o]})}();
!function(){function t(t,r){function e(){if(r.currentUser){var e=r.currentUser;t.post("api/auth/authenticate?user="+e.user+"&password="+e.password).then(function(t){e.token=t.data,r.currentUser=e}).catch(function(t){})}}return{getToken:e}}var r=angular.module("app");r.service("User",["$http","$localStorage",t])}();
!function(){"use strict";function t(t){function n(n){return t.get("api/product/"+n).then(function(t){return t.data}).catch(function(t){console.log(t.message)})}function e(n){return t.get("api/product",{params:n}).then(function(t){return t.data}).catch(function(t){console.log(t.message)})}function u(n){return t.delete("api/product/"+n).then(function(t){return t.data}).catch(function(t){console.log(t.message)})}function c(n){return n.id?t.put("api/product",n).then(function(t){return t.data}).catch(function(t){return t.message}):t.post("api/product",n).then(function(t){return t.data}).catch(function(t){return t.message})}return{getProduct:n,getAllProducts:e,remove:u,save:c}}var n=angular.module("app");n.factory("Product",["$http",t])}();
!function(){function t(t){var a=this;a.$onInit=function(){console.log("staff edit init"),a.title="New Staff",a.resolve&&(a.productId=a.resolve.productId),a.resolve.staff&&(a.staff=a.resolve.staff,a.title=a.staff.firstname+" "+a.staff.lastname)},a.cancel=function(){a.dismiss()},a.save=function(){a.productId?t.post("api/staff/"+a.productId,a.staff).then(function(t){angular.extend(a.staff,t.data),a.modalInstance.close(t.data)}).catch(function(t){console.log("something went wrong",t.message)}):t.post("api/staff",a.staff).then(function(t){angular.extend(a.staff,t.data),a.modalInstance.close(t.data)}).catch(function(t){console.log("something went wrong",t.message)})}}var a=angular.module("app");a.component("staffEdit",{bindings:{resolve:"<",close:"&",dismiss:"&",staff:"<",productId:"<",modalInstance:"<"},templateUrl:"app/staff/staff-edit.component.html",controller:["$http",t]})}();
!function(){function t(t,n,o){var e=this;e.$onInit=function(){console.log("staff list init")},e.edit=function(t){n.open({component:"staffEdit",bindings:{modalInstance:"<",staff:t},resolve:{staff:t},size:"md"}).result.then(function(t){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->")},function(t){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+t)})},e.delete=function(n){o({title:"Delete",content:"Are you sure you want to delete <br /><strong>"+n.firstname+n.lastname+"</strong>?",type:"red",buttons:{yes:{keys:["y"],action:function(o,s){t.delete("api/staff/"+n.id).then(function(t){var o=e.staff.indexOf(n);e.staff.splice(o,1)}).catch(function(t){console.log("error",t.message)})}},no:{keys:["N"],action:function(t,n){}}}})}}var n=angular.module("app");n.component("staffList",{bindings:{staff:"<"},templateUrl:"app/staff/staff-list.component.html",controller:["$http","$uibModal","$ngConfirm",t]})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
