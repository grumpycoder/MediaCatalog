!function(){"use strict";var t=angular.module("app",["ngStorage","app.directives","shared.components","ui.bootstrap","smart-table","cp.ngConfirm","treasure-overlay-spinner","toastr"]);t.config(["toastrConfig",function(t){angular.extend(t,{positionClass:"toast-bottom-right",newestOnTop:!0,allowHtml:!1,closeButton:!1,closeHtml:"<button>&times;</button>",extendedTimeOut:1e3,iconClasses:{error:"toast-error",info:"toast-info",success:"toast-success",warning:"toast-warning"},messageClass:"toast-message",onHidden:null,onShown:null,onTap:null,progressBar:!1,tapToDismiss:!0,templates:{toast:"directives/toast/toast.html",progressbar:"directives/progressbar/progressbar.html"},timeOut:5e3,titleClass:"toast-title",toastClass:"toast"})}])}();
!function(){angular.module("shared.components",[])}();
!function(){function n(){var n=this;n.$onInit=function(){console.log("modal",n)}}var o=angular.module("app");o.component("confirmationModal",{bindings:{},template:"yes or no",controller:[n]})}();
!function(){function n(n,o){var e=this;e.$onInit=function(){n.get("api/publisher").then(function(n){e.publishers=n.data}).catch(function(n){console.log(n.message)})},e.create=function(){o.open({component:"publisherEdit",bindings:{modalInstance:"<"},size:"lg"}).result.then(function(n){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),console.info("returning result",n),e.publishers.unshift(n),e.id=n.id},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})},e.edit=function(){o.open({component:"publisherEdit",bindings:{modalInstance:"<"},resolve:{id:e.id},size:"lg"}).result.then(function(n){angular.forEach(e.publishers,function(o){o.id===e.id&&(angular.extend(o,n),e.id=o.id)})},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})}}var o=angular.module("shared.components");o.component("publisherSelect",{bindings:{id:"="},templateUrl:"app/common/publisher-select.component.html",controller:["$http","$uibModal",n]})}();
!function(){angular.module("app.directives",[])}();
!function(){var e=angular.module("app.directives");e.directive("stSubmitSearch",["stConfig","$timeout","$parse",function(e,t,r){return{require:"^stTable",link:function(e,t,r,n){return t.bind("click",function(){var e=n;e.pipe()})}}}]),e.directive("clearKey",function(){return{restrict:"EA",require:"ngModel",link:function(e,t,r,n){t.on("keydown",function(t){27===t.which&&(n.$setViewValue(null),n.$render(),e.$apply())})}}}),e.directive("stResetSearch",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){return t.bind("click",function(){var t=n[1],r=n[0];return e.$apply(function(){angular.forEach(t.$viewValue,function(e,r){"page"===r.toLowerCase()&&(t.$viewValue[r]=1),Array.isArray(e)||_.includes(r.toLowerCase(),"page")||(t.$viewValue[r]=null)});var e=r.tableState();return e.search.predicateObject={},e.pagination.start=0,r.pipe()})})}}}),e.directive("stClearKey",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){t.on("keydown",function(r){var i=n[1],a=n[0];return 13===r.which?a.pipe():27===r.which?void 0!==t.context.attributes["st-search"]?e.$apply(function(){var e=t.context.attributes["st-search"].value,r=a.tableState();return r.search.predicateObject[e]="",a.pipe()}):e.$apply(function(){i.$setViewValue(null),i.$render()}):void 0})}}})}();
!function(){function t(t){var e=this;e.dateOptions={dateDisabled:!1,formatYear:"yy"},e.dateFormat="MM/DD/YYYY",e.$onInit=function(){e.title="New Media",e.resolve&&(e.id=e.resolve.id),e.id&&t.getProduct(e.id).then(function(t){e.product=t,e.title=t.title,e.product.receiptDate=new Date(t.receiptDate)})},e.cancel=function(){e.dismiss()},e.save=function(){return""===e.product.category&&(e.product.category=null),t.save(e.product).then(function(t){angular.extend(e.product,t),e.modalInstance.close(e.product)}).catch(function(t){console.log("Error saving product",t.message)}).finally(function(){})},e.publisherChanged=function(){console.log("publisher changed")}}var e=angular.module("app");e.component("productEdit",{templateUrl:"app/product/product-edit.component.html",bindings:{id:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},controller:["Product",t]})}();
!function(){"use strict";function e(e,o,n,t){var i,s=this,d=15;s.searchModel={page:1,pageSize:d,filteredCount:0,totalCount:0,totalPages:0},s.$onInit=function(){console.log("product list init"),s.title="Media Library",s.loading=!0},s.search=function(e){s.loading=!0,i=e,"undefined"!=typeof e.sort.predicate?(s.searchModel.orderBy=e.sort.predicate,s.searchModel.orderDirection=e.sort.reverse?"desc":"asc"):(s.searchModel.orderBy=null,s.searchModel.orderDirection=null),t.getAllProducts(s.searchModel).then(function(e){s.products=e.results,s.searchModel=e,delete s.searchModel.results,s.loading=!1}).catch(function(e){s.loading=!1}).finally(function(){})},s.paged=function(){s.search(i)},s.create=function(){e.open({component:"productEdit",bindings:{modalInstance:"<"},size:"md"}).result.then(function(e){s.products.unshift(e),n.info("Created "+e.title)},function(e){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+e)})},s.edit=function(o){e.open({component:"productEdit",bindings:{modalInstance:"<"},resolve:{id:o.id},size:"md"}).result.then(function(e){angular.extend(o,e),n.info("Saved "+e.title)},function(e){console.log("reason",e)})},s.delete=function(e){o({title:"Delete",content:"Are you sure you want to delete <br /><strong>"+e.title+"</strong>?",type:"red",buttons:{yes:{keys:["y"],action:function(o,i){t.remove(e.id).then(function(o){var t=s.products.indexOf(e);s.products.splice(t,1),n.warning("Deleted "+e.title)})}},no:{keys:["N"],action:function(e,o){}}}})},s.showDetails=function(o){e.open({component:"productSummary",bindings:{modalInstance:"<"},resolve:{id:o.id,asModal:!0},size:"md"}).result.then(function(e){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),angular.extend(o,e)},function(e){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+e)})}}var o=angular.module("app");o.component("productList",{templateUrl:"app/product/product-list.component.html",controller:["$uibModal","$ngConfirm","toastr","Product",e]})}();
!function(){function o(o,n){var t=this;t.$onInit=function(){t.loading=!0,t.resolve&&(t.id=t.resolve.id,t.asModal=t.resolve.asModal,t.addStaffVisible=!1),n.getProduct(t.id).then(function(o){t.product=o,t.loading=!1})},t.edit=function(){o.open({component:"productEdit",bindings:{modalInstance:"<"},resolve:{id:t.product.id},size:"md"}).result.then(function(o){angular.extend(t.product,o)},function(o){})},t.showNewStaff=function(){o.open({component:"staffEdit",bindings:{modalInstance:"<"},resolve:{productId:t.id},size:"md"}).result.then(function(o){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),t.product.staff.unshift(o)},function(o){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+o)})},t.cancel=function(){t.modalInstance.close(t.product)}}var n=angular.module("app");n.component("productSummary",{bindings:{id:"<",asModal:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/product/product-summary.component.html",controller:["$uibModal","Product",o]})}();
!function(){function e(e){var n,t=[];for(n in e.modelState)if(e.modelState.hasOwnProperty(n))for(var s=0;s<e.modelState[n].length;s++)t.push(e.modelState[n][s]);return t}function n(n,t,s){var i=this;i.$onInit=function(){console.log("publisher edit init",i),i.title="New Publisher",i.publisher={},i.resolve&&(i.id=i.resolve.id),i.id&&n.get(i.id).then(function(e){i.publisher=e,i.title=e.name})},i.cancel=function(){i.dismiss()},i.save=function(){i.publisher.id?s.put("api/publisher",i.publisher).then(function(e){angular.extend(i.publisher,e.data),t.success("Saved Publisher ",i.publisher.name),i.modalInstance.close(i.publisher)}).catch(function(n){console.log("Oops. Something went wrong",n),t.error("Oops. Something happened: "+n.data.message),i.errors=e(n.data)}):s.post("api/publisher",i.publisher).then(function(e){angular.extend(i.publisher,e.data),t.success("Saved ",i.publisher.name),i.modalInstance.close(i.publisher)}).catch(function(n){console.log("Oops. Something went wrong",n),t.error("Oops. Something happened: "+n.data.message),i.errors=e(n.data)})}}var t=angular.module("app");t.component("publisherEdit",{bindings:{id:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/publishers/publisher-edit.component.html",controller:["Publisher","toastr","$http",n]})}();
!function(){"use strict";function t(t){function n(n){return t.get("api/product/"+n).then(function(t){return t.data}).catch(function(t){console.log(t.message)})}function e(n){return t.get("api/product",{params:n}).then(function(t){return t.data}).catch(function(t){console.log(t.message)})}function u(n){return t.delete("api/product/"+n).then(function(t){return t.data}).catch(function(t){console.log(t.message)})}function c(n){return n.id?t.put("api/product",n).then(function(t){return t.data}).catch(function(t){return t.message}):t.post("api/product",n).then(function(t){return t.data}).catch(function(t){return t.message})}return{getProduct:n,getAllProducts:e,remove:u,save:c}}var n=angular.module("app");n.factory("Product",["$http",t])}();
!function(){"use strict";function t(t,n){function e(e){return t.get("api/publisher/"+e).then(function(t){return t.data}).catch(function(t){console.log("Oops. Something happened getting publisher"),n.error("Oops. Somthing happened getting publisher: "+t.data.message)})}function o(){return t.get("api/publisher").then(function(t){return t.data}).catch(function(t){console.log(t.message)})}function r(n){return t.delete("api/publisher/"+n).then(function(t){return t.data}).catch(function(t){console.log(t.message)})}function u(n){return n.id?t.put("api/publisher",n).then(function(t){return t.data},function(t){return t}):(console.log("posting"),t.post("api/product",n).then(i,a))}function i(t){return console.log("success",t),t.data}function a(t){return console.log("error",t),t.data}return{get:e,getAllPublishers:o,remove:r,save:u}}var n=angular.module("app");n.factory("Publisher",["$http","toastr",t])}();
!function(){function t(t){var a=this;a.$onInit=function(){console.log("staff edit init"),a.title="New Staff",a.resolve&&(a.productId=a.resolve.productId),a.resolve.staff&&(a.staff=a.resolve.staff,a.title=a.staff.firstname+" "+a.staff.lastname)},a.cancel=function(){a.dismiss()},a.save=function(){a.productId?t.post("api/staff/"+a.productId,a.staff).then(function(t){angular.extend(a.staff,t.data),a.modalInstance.close(t.data)}).catch(function(t){console.log("something went wrong",t.message)}):t.post("api/staff",a.staff).then(function(t){angular.extend(a.staff,t.data),a.modalInstance.close(t.data)}).catch(function(t){console.log("something went wrong",t.message)})}}var a=angular.module("app");a.component("staffEdit",{bindings:{resolve:"<",close:"&",dismiss:"&",staff:"<",productId:"<",modalInstance:"<"},templateUrl:"app/staff/staff-edit.component.html",controller:["$http",t]})}();
!function(){function t(t,n,o){var e=this;e.$onInit=function(){console.log("staff list init")},e.edit=function(t){n.open({component:"staffEdit",bindings:{modalInstance:"<",staff:t},resolve:{staff:t},size:"md"}).result.then(function(t){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->")},function(t){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+t)})},e.delete=function(n){o({title:"Delete",content:"Are you sure you want to delete <br /><strong>"+n.firstname+n.lastname+"</strong>?",type:"red",buttons:{yes:{keys:["y"],action:function(o,s){t.delete("api/staff/"+n.id).then(function(t){var o=e.staff.indexOf(n);e.staff.splice(o,1)}).catch(function(t){console.log("error",t.message)})}},no:{keys:["N"],action:function(t,n){}}}})}}var n=angular.module("app");n.component("staffList",{bindings:{staff:"<"},templateUrl:"app/staff/staff-list.component.html",controller:["$http","$uibModal","$ngConfirm",t]})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJjb21tb24vY29tcG9uZW50cy5tb2R1bGUuanMiLCJjb21tb24vY29uZnJtYXRpb24tbW9kYWwuY29tcG9uZW50LmpzIiwiY29tbW9uL3B1Ymxpc2hlci1zZWxlY3QuY29tcG9uZW50LmpzIiwiZGlyZWN0aXZlcy9kaXJlY3RpdmVzLm1vZHVsZXMuanMiLCJkaXJlY3RpdmVzL3N0VGFibGUuZGlyZWN0aXZlLmpzIiwicHJvZHVjdC9wcm9kdWN0LWVkaXQuY29tcG9uZW50LmpzIiwicHJvZHVjdC9wcm9kdWN0LWxpc3QuY29tcG9uZW50LmpzIiwicHJvZHVjdC9wcm9kdWN0LXN1bW1hcnkuY29tcG9uZW50LmpzIiwicHVibGlzaGVycy9wdWJsaXNoZXItZWRpdC5jb21wb25lbnQuanMiLCJzZXJ2aWNlcy9wcm9kdWN0LnNlcnZpY2UuanMiLCJzZXJ2aWNlcy9wdWJsaXNoZXIuc2VydmljZS5qcyIsInN0YWZmL3N0YWZmLWVkaXQuY29tcG9uZW50LmpzIiwic3RhZmYvc3RhZmYtbGlzdC5jb21wb25lbnQuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiYW5ndWxhciIsImNvbmZpZyIsInRvYXN0ckNvbmZpZyIsImV4dGVuZCIsInBvc2l0aW9uQ2xhc3MiLCJuZXdlc3RPblRvcCIsImFsbG93SHRtbCIsImNsb3NlQnV0dG9uIiwiY2xvc2VIdG1sIiwiZXh0ZW5kZWRUaW1lT3V0IiwiaWNvbkNsYXNzZXMiLCJlcnJvciIsImluZm8iLCJzdWNjZXNzIiwid2FybmluZyIsIm1lc3NhZ2VDbGFzcyIsIm9uSGlkZGVuIiwib25TaG93biIsIm9uVGFwIiwicHJvZ3Jlc3NCYXIiLCJ0YXBUb0Rpc21pc3MiLCJ0ZW1wbGF0ZXMiLCJ0b2FzdCIsInByb2dyZXNzYmFyIiwidGltZU91dCIsInRpdGxlQ2xhc3MiLCJ0b2FzdENsYXNzIiwiY29udHJvbGxlciIsIiRjdHJsIiwidGhpcyIsIiRvbkluaXQiLCJjb25zb2xlIiwibG9nIiwiY29tcG9uZW50IiwiYmluZGluZ3MiLCJ0ZW1wbGF0ZSIsIiRodHRwIiwiJHVpYk1vZGFsIiwiZ2V0IiwidGhlbiIsInIiLCJwdWJsaXNoZXJzIiwiZGF0YSIsImNhdGNoIiwiZXJyIiwibWVzc2FnZSIsImNyZWF0ZSIsIm9wZW4iLCJtb2RhbEluc3RhbmNlIiwic2l6ZSIsInJlc3VsdCIsInVuc2hpZnQiLCJpZCIsInJlYXNvbiIsImVkaXQiLCJyZXNvbHZlIiwiZm9yRWFjaCIsIml0ZW0iLCJ0ZW1wbGF0ZVVybCIsImRpcmVjdGl2ZSIsInN0Q29uZmlnIiwiJHRpbWVvdXQiLCIkcGFyc2UiLCJyZXF1aXJlIiwibGluayIsInNjb3BlIiwiZWxlbWVudCIsImF0dHIiLCJjdHJsIiwiYmluZCIsInRhYmxlQ3RybCIsInBpcGUiLCJyZXN0cmljdCIsImVsIiwiYXR0cnMiLCJvbiIsImV2ZW50Iiwid2hpY2giLCIkc2V0Vmlld1ZhbHVlIiwiJHJlbmRlciIsIiRhcHBseSIsImN0cmxzIiwibW9kZWwiLCIkdmlld1ZhbHVlIiwidmFsdWUiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsIkFycmF5IiwiaXNBcnJheSIsIl8iLCJpbmNsdWRlcyIsInRhYmxlU3RhdGUiLCJzZWFyY2giLCJwcmVkaWNhdGVPYmplY3QiLCJwYWdpbmF0aW9uIiwic3RhcnQiLCJuZ01vZGVsIiwidW5kZWZpbmVkIiwiY29udGV4dCIsImF0dHJpYnV0ZXMiLCJmaWVsZE5hbWUiLCJzZXJ2aWNlIiwiZGF0ZU9wdGlvbnMiLCJkYXRlRGlzYWJsZWQiLCJmb3JtYXRZZWFyIiwiZGF0ZUZvcm1hdCIsInRpdGxlIiwiZ2V0UHJvZHVjdCIsInByb2R1Y3QiLCJyZWNlaXB0RGF0ZSIsIkRhdGUiLCJjYW5jZWwiLCJkaXNtaXNzIiwic2F2ZSIsImNhdGVnb3J5IiwiY2xvc2UiLCJmaW5hbGx5IiwicHVibGlzaGVyQ2hhbmdlZCIsIiRtb2RhbCIsIiRuZ0NvbmZpcm0iLCJ0b2FzdHIiLCJ0YWJsZVN0YXRlUmVmIiwicGFnZVNpemVEZWZhdWx0Iiwic2VhcmNoTW9kZWwiLCJwYWdlIiwicGFnZVNpemUiLCJmaWx0ZXJlZENvdW50IiwidG90YWxDb3VudCIsInRvdGFsUGFnZXMiLCJsb2FkaW5nIiwic29ydCIsIm9yZGVyQnkiLCJwcmVkaWNhdGUiLCJvcmRlckRpcmVjdGlvbiIsInJldmVyc2UiLCJnZXRBbGxQcm9kdWN0cyIsInByb2R1Y3RzIiwicmVzdWx0cyIsInBhZ2VkIiwiZGVsZXRlIiwiY29udGVudCIsInR5cGUiLCJidXR0b25zIiwieWVzIiwia2V5cyIsImFjdGlvbiIsImJ1dHRvbiIsInJlbW92ZSIsImlkeCIsImluZGV4T2YiLCJzcGxpY2UiLCJubyIsInNob3dEZXRhaWxzIiwiYXNNb2RhbCIsImFkZFN0YWZmVmlzaWJsZSIsInNob3dOZXdTdGFmZiIsInByb2R1Y3RJZCIsInN0YWZmIiwicGFyc2VFcnJvcnMiLCJyZXNwb25zZSIsImVycm9ycyIsIm1vZGVsU3RhdGUiLCJoYXNPd25Qcm9wZXJ0eSIsImkiLCJsZW5ndGgiLCJwdXNoIiwicHVibGlzaGVyIiwibmFtZSIsInB1dCIsInBvc3QiLCJzZXJ2aWNlQ29udHJvbGxlciIsInBhcmFtcyIsImZhY3RvcnkiLCJnZXRBbGxQdWJsaXNoZXJzIiwiX3N1Y2Nlc3MiLCJfZmFpbHVyZSIsImZpcnN0bmFtZSIsImxhc3RuYW1lIiwibWVtYmVyIl0sIm1hcHBpbmdzIjoiQ0FDQSxXQUNJLFlBRUEsSUFBSUEsR0FBU0MsUUFBUUQsT0FBTyxPQUV4QixZQUNBLGlCQUNBLG9CQUNBLGVBQ0EsY0FDQSxlQUNBLDJCQUNBLFVBR0pBLEdBQU9FLFFBQVEsZUFBZ0IsU0FBVUMsR0FDckNGLFFBQVFHLE9BQU9ELEdBQ1hFLGNBQWUscUJBQ2ZDLGFBQWEsRUFDYkMsV0FBVyxFQUNYQyxhQUFhLEVBQ2JDLFVBQVcsMkJBQ1hDLGdCQUFpQixJQUNqQkMsYUFDSUMsTUFBTyxjQUNQQyxLQUFNLGFBQ05DLFFBQVMsZ0JBQ1RDLFFBQVMsaUJBRWJDLGFBQWMsZ0JBQ2RDLFNBQVUsS0FDVkMsUUFBUyxLQUNUQyxNQUFPLEtBQ1BD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Q1R0QixRQUFRbkIsS0FBSyxvRkFBc0Z5QyxNQUkzR3pCLEVBQU0rRyxPQUFTLFNBQVV1QyxHQUNyQjNELEdBQ0liLE1BQU8sU0FDUGtDLFFBQVMsaURBQW1Ec0MsRUFBT0YsVUFBWUUsRUFBT0QsU0FBVyxhQUNqR3BDLEtBQU0sTUFDTkMsU0FDSUMsS0FDSUMsTUFBTyxLQUNQQyxPQUFRLFNBQVVoRixFQUFPaUYsR0FDckI5RyxFQUFNdUcsT0FBTyxhQUFldUMsRUFBTzlILElBQUliLEtBQUssU0FBVUMsR0FDbEQsR0FBSTRHLEdBQU14SCxFQUFNaUksTUFBTVIsUUFBUTZCLEVBQzlCdEosR0FBTWlJLE1BQU1QLE9BQU9GLEVBQUssS0FDekJ6RyxNQUFNLFNBQVVDLEdBQ2ZiLFFBQVFDLElBQUksUUFBU1ksRUFBSUMsYUFJckMwRyxJQUNJUCxNQUFPLEtBQ1BDLE9BQVEsU0FBVWhGLEVBQU9pRixVQS9DN0MsR0FBSW5KLEdBQVNDLFFBQVFELE9BQU8sTUF5RDVCQSxHQUFPa0MsVUFBVSxhQUVUQyxVQUNJMkgsTUFBTyxLQUVYbkcsWUFBYSxzQ0FDYi9CLFlBQWEsUUFBUyxZQUFhLGFBQWNBIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL2FwcC5tb2R1bGUuanNcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsXHJcbiAgICBbXHJcbiAgICAgICAgJ25nU3RvcmFnZScsXHJcbiAgICAgICAgJ2FwcC5kaXJlY3RpdmVzJyxcclxuICAgICAgICAnc2hhcmVkLmNvbXBvbmVudHMnLFxyXG4gICAgICAgICd1aS5ib290c3RyYXAnLFxyXG4gICAgICAgICdzbWFydC10YWJsZScsXHJcbiAgICAgICAgJ2NwLm5nQ29uZmlybScsIFxyXG4gICAgICAgICd0cmVhc3VyZS1vdmVybGF5LXNwaW5uZXInLCBcclxuICAgICAgICAndG9hc3RyJ1xyXG4gICAgICAgIF0pO1xyXG5cclxuICAgIG1vZHVsZS5jb25maWcoWyd0b2FzdHJDb25maWcnLCBmdW5jdGlvbiAodG9hc3RyQ29uZmlnKSB7XHJcbiAgICAgICAgYW5ndWxhci5leHRlbmQodG9hc3RyQ29uZmlnLCB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uQ2xhc3M6ICd0b2FzdC1ib3R0b20tcmlnaHQnLFxyXG4gICAgICAgICAgICBuZXdlc3RPblRvcDogdHJ1ZSxcclxuICAgICAgICAgICAgYWxsb3dIdG1sOiBmYWxzZSxcclxuICAgICAgICAgICAgY2xvc2VCdXR0b246IGZhbHNlLFxyXG4gICAgICAgICAgICBjbG9zZUh0bWw6ICc8YnV0dG9uPiZ0aW1lczs8L2J1dHRvbj4nLFxyXG4gICAgICAgICAgICBleHRlbmRlZFRpbWVPdXQ6IDEwMDAsXHJcbiAgICAgICAgICAgIGljb25DbGFzc2VzOiB7XHJcbiAgICAgICAgICAgICAgICBlcnJvcjogJ3RvYXN0LWVycm9yJyxcclxuICAgICAgICAgICAgICAgIGluZm86ICd0b2FzdC1pbmZvJyxcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ICd0b2FzdC1zdWNjZXNzJyxcclxuICAgICAgICAgICAgICAgIHdhcm5pbmc6ICd0b2FzdC13YXJuaW5nJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtZXNzYWdlQ2xhc3M6ICd0b2FzdC1tZXNzYWdlJyxcclxuICAgICAgICAgICAgb25IaWRkZW46IG51bGwsXHJcbiAgICAgICAgICAgIG9uU2hvd246IG51bGwsXHJcbiAgICAgICAgICAgIG9uVGFwOiBudWxsLFxyXG4gICAgICAgICAgICBwcm9ncmVzc0JhcjogZmFsc2UsXHJcbiAgICAgICAgICAgIHRhcFRvRGlzbWlzczogdHJ1ZSxcclxuICAgICAgICAgICAgdGVtcGxhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICB0b2FzdDogJ2RpcmVjdGl2ZXMvdG9hc3QvdG9hc3QuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc2JhcjogJ2RpcmVjdGl2ZXMvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3NiYXIuaHRtbCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGltZU91dDogNTAwMCxcclxuICAgICAgICAgICAgdGl0bGVDbGFzczogJ3RvYXN0LXRpdGxlJyxcclxuICAgICAgICAgICAgdG9hc3RDbGFzczogJ3RvYXN0J1xyXG4gICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG59KSgpOyIsIi8vc2hhcmVkLWNvbXBvbmVudHMubW9kdWxlLmpzXHJcbihmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3NoYXJlZC5jb21wb25lbnRzJywgW10pO1xyXG4gICAgfVxyXG4pKCk7IiwiLy9jb25mcm1hdGlvbi1tb2RhbC5jb21wb25lbnQuanNcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJyk7XHJcblxyXG4gICAgZnVuY3Rpb24gY29udHJvbGxlcigpIHtcclxuICAgICAgICB2YXIgJGN0cmwgPSB0aGlzOyBcclxuXHJcbiAgICAgICAgJGN0cmwuJG9uSW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbW9kYWwnLCAkY3RybCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBtb2R1bGUuY29tcG9uZW50KCdjb25maXJtYXRpb25Nb2RhbCcsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJ3llcyBvciBubycsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtjb250cm9sbGVyXVxyXG4gICAgICAgIH0pO1xyXG59XHJcbikoKTsiLCIvL3B1Ymxpc2hlci1saXN0LmNvbXBvbmVudC5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIHZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnc2hhcmVkLmNvbXBvbmVudHMnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKCRodHRwLCAkdWliTW9kYWwpIHtcclxuICAgICAgICB2YXIgJGN0cmwgPSB0aGlzO1xyXG5cclxuICAgICAgICAkY3RybC4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkaHR0cC5nZXQoJ2FwaS9wdWJsaXNoZXInKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5wdWJsaXNoZXJzID0gci5kYXRhO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICdwdWJsaXNoZXJFZGl0JyxcclxuICAgICAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZTogXCI8XCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaXplOiAnbGcnXHJcbiAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkkgd2FzIGNsb3NlZCwgc28gZG8gd2hhdCBJIG5lZWQgdG8gZG8gbXlDb250ZW50J3MgY29udHJvbGxlciBub3cuICBSZXN1bHQgd2FzLT5cIik7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ3JldHVybmluZyByZXN1bHQnLCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgJGN0cmwucHVibGlzaGVycy51bnNoaWZ0KHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5pZCA9IHJlc3VsdC5pZDtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiSSB3YXMgZGltaXNzZWQsIHNvIGRvIHdoYXQgSSBuZWVkIHRvIGRvIG15Q29udGVudCdzIGNvbnRyb2xsZXIgbm93LiAgUmVhc29uIHdhcy0+XCIgKyByZWFzb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmVkaXQgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICdwdWJsaXNoZXJFZGl0JyxcclxuICAgICAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZTogXCI8XCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICRjdHJsLmlkXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2l6ZTogJ2xnJ1xyXG4gICAgICAgICAgICB9KS5yZXN1bHQudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJGN0cmwucHVibGlzaGVycywgZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5pZCA9PT0gJGN0cmwuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoaXRlbSwgcmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGN0cmwuaWQgPSBpdGVtLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiSSB3YXMgZGltaXNzZWQsIHNvIGRvIHdoYXQgSSBuZWVkIHRvIGRvIG15Q29udGVudCdzIGNvbnRyb2xsZXIgbm93LiAgUmVhc29uIHdhcy0+XCIgKyByZWFzb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbW9kdWxlLmNvbXBvbmVudCgncHVibGlzaGVyU2VsZWN0JyxcclxuICAgIHtcclxuICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICBpZDogJz0nXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9jb21tb24vcHVibGlzaGVyLXNlbGVjdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogWyckaHR0cCcsICckdWliTW9kYWwnLCBjb250cm9sbGVyXVxyXG4gICAgfSk7XHJcblxyXG5cclxufVxyXG4pKCk7IiwiLy9kaXJlY3RpdmVzLm1vZHVsZXMuanNcclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgYW5ndWxhci5tb2R1bGUoJ2FwcC5kaXJlY3RpdmVzJywgW10pOyBcclxufSkoKTsiLCIvL3N0VGFibGUuZGlyZWN0aXZlLmpzXHJcbihmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAuZGlyZWN0aXZlcycpO1xyXG5cclxuICAgIG1vZHVsZS5kaXJlY3RpdmUoJ3N0U3VibWl0U2VhcmNoJywgWydzdENvbmZpZycsICckdGltZW91dCcsICckcGFyc2UnLCBmdW5jdGlvbiAoc3RDb25maWcsICR0aW1lb3V0LCAkcGFyc2UpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXF1aXJlOiAnXnN0VGFibGUnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmJpbmQoJ2NsaWNrJyxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZUN0cmwgPSBjdHJsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUN0cmwucGlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcblxyXG4gICAgbW9kdWxlLmRpcmVjdGl2ZShcImNsZWFyS2V5XCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0VBJyxcclxuICAgICAgICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsLCBhdHRycywgY3RybCkge1xyXG4gICAgICAgICAgICAgICAgZWwub24oJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggIT09IDI3KSB7IHJldHVybjsgfSAvLyBjaGVjayBrZXkgaG93IHlvdSB3YW50XHJcbiAgICAgICAgICAgICAgICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN0cmwuJHJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIG1vZHVsZS5kaXJlY3RpdmUoXCJzdFJlc2V0U2VhcmNoXCIsXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdHJpY3Q6ICdFQScsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZTogWydec3RUYWJsZScsICdebmdNb2RlbCddLFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmJpbmQoJ2NsaWNrJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW9kZWwgPSBjdHJsc1sxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3RybCA9IGN0cmxzWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG1vZGVsLiR2aWV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ3BhZ2UnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLiR2aWV3VmFsdWVba2V5XSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBfLmluY2x1ZGVzKGtleS50b0xvd2VyQ2FzZSgpLCAncGFnZScpKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuJHZpZXdWYWx1ZVtrZXldID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGVTdGF0ZSA9IGN0cmwudGFibGVTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVN0YXRlLnNlYXJjaC5wcmVkaWNhdGVPYmplY3QgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVTdGF0ZS5wYWdpbmF0aW9uLnN0YXJ0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN0cmwucGlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgbW9kdWxlLmRpcmVjdGl2ZShcInN0Q2xlYXJLZXlcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRUEnLFxyXG4gICAgICAgICAgICByZXF1aXJlOiBbJ15zdFRhYmxlJywgJ15uZ01vZGVsJ10sXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5nTW9kZWwgPSBjdHJsc1sxXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3RybCA9IGN0cmxzWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHJsLnBpcGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSAyNykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY29udGV4dC5hdHRyaWJ1dGVzWydzdC1zZWFyY2gnXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGROYW1lID0gZWxlbWVudC5jb250ZXh0LmF0dHJpYnV0ZXNbJ3N0LXNlYXJjaCddLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZVN0YXRlID0gY3RybC50YWJsZVN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVTdGF0ZS5zZWFyY2gucHJlZGljYXRlT2JqZWN0W2ZpZWxkTmFtZV0gPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3RybC5waXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmdNb2RlbC4kcmVuZGVyKCk7IC8vIHdpbGwgdXBkYXRlIHRoZSBpbnB1dCB2YWx1ZSBhcyB3ZWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbn1cclxuKSgpOyIsIi8vcHJvZHVjdC1lZGl0LmNvbXBvbmVudC5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKHNlcnZpY2UpIHtcclxuICAgICAgICB2YXIgJGN0cmwgPSB0aGlzO1xyXG5cclxuICAgICAgICAkY3RybC5kYXRlT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgZGF0ZURpc2FibGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgZm9ybWF0WWVhcjogJ3l5J1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJGN0cmwuZGF0ZUZvcm1hdCA9IFwiTU0vREQvWVlZWVwiO1xyXG5cclxuICAgICAgICAkY3RybC4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkY3RybC50aXRsZSA9ICdOZXcgTWVkaWEnO1xyXG4gICAgICAgICAgICBpZiAoJGN0cmwucmVzb2x2ZSkge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwuaWQgPSAkY3RybC5yZXNvbHZlLmlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkY3RybC5pZCkge1xyXG4gICAgICAgICAgICAgICAgc2VydmljZS5nZXRQcm9kdWN0KCRjdHJsLmlkKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGN0cmwucHJvZHVjdCA9IHI7XHJcbiAgICAgICAgICAgICAgICAgICAgJGN0cmwudGl0bGUgPSByLnRpdGxlO1xyXG4gICAgICAgICAgICAgICAgICAgICRjdHJsLnByb2R1Y3QucmVjZWlwdERhdGUgPSBuZXcgRGF0ZShyLnJlY2VpcHREYXRlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRjdHJsLmRpc21pc3MoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLnNhdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICgkY3RybC5wcm9kdWN0LmNhdGVnb3J5ID09PSAnJykgJGN0cmwucHJvZHVjdC5jYXRlZ29yeSA9IG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlLnNhdmUoJGN0cmwucHJvZHVjdCkudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoJGN0cmwucHJvZHVjdCwgcik7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5tb2RhbEluc3RhbmNlLmNsb3NlKCRjdHJsLnByb2R1Y3QpO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3Igc2F2aW5nIHByb2R1Y3QnLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLnB1Ymxpc2hlckNoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwdWJsaXNoZXIgY2hhbmdlZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtb2R1bGUuY29tcG9uZW50KCdwcm9kdWN0RWRpdCcsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9wcm9kdWN0L3Byb2R1Y3QtZWRpdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBpZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZTogJzwnLFxyXG4gICAgICAgICAgICAgICAgY2xvc2U6ICcmJyxcclxuICAgICAgICAgICAgICAgIGRpc21pc3M6ICcmJyxcclxuICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2U6ICc8J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbJ1Byb2R1Y3QnLCBjb250cm9sbGVyXVxyXG4gICAgICAgIH0pO1xyXG59KSgpO1xyXG4iLCIvL3Byb2R1Y3QtbGlzdC5jb21wb25lbnQuanNcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNvbnRyb2xsZXIoJG1vZGFsLCAkbmdDb25maXJtLCB0b2FzdHIsIHByb2R1Y3QpIHtcclxuICAgICAgICB2YXIgJGN0cmwgPSB0aGlzO1xyXG4gICAgICAgIHZhciBwYWdlU2l6ZURlZmF1bHQgPSAxNTtcclxuICAgICAgICB2YXIgdGFibGVTdGF0ZVJlZjtcclxuXHJcbiAgICAgICAgJGN0cmwuc2VhcmNoTW9kZWwgPSB7XHJcbiAgICAgICAgICAgIHBhZ2U6IDEsXHJcbiAgICAgICAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZURlZmF1bHQsIFxyXG4gICAgICAgICAgICBmaWx0ZXJlZENvdW50OiAwLCBcclxuICAgICAgICAgICAgdG90YWxDb3VudDogMCwgXHJcbiAgICAgICAgICAgIHRvdGFsUGFnZXM6IDBcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkY3RybC4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygncHJvZHVjdCBsaXN0IGluaXQnKTtcclxuICAgICAgICAgICAgJGN0cmwudGl0bGUgPSAnTWVkaWEgTGlicmFyeSc7XHJcbiAgICAgICAgICAgICRjdHJsLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuc2VhcmNoID0gZnVuY3Rpb24gKHRhYmxlU3RhdGUpIHtcclxuICAgICAgICAgICAgJGN0cmwubG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIHRhYmxlU3RhdGVSZWYgPSB0YWJsZVN0YXRlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiAodGFibGVTdGF0ZS5zb3J0LnByZWRpY2F0ZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLnNlYXJjaE1vZGVsLm9yZGVyQnkgPSB0YWJsZVN0YXRlLnNvcnQucHJlZGljYXRlO1xyXG4gICAgICAgICAgICAgICAgJGN0cmwuc2VhcmNoTW9kZWwub3JkZXJEaXJlY3Rpb24gPSB0YWJsZVN0YXRlLnNvcnQucmV2ZXJzZSA/ICdkZXNjJyA6ICdhc2MnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwuc2VhcmNoTW9kZWwub3JkZXJCeSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5zZWFyY2hNb2RlbC5vcmRlckRpcmVjdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHByb2R1Y3QuZ2V0QWxsUHJvZHVjdHMoJGN0cmwuc2VhcmNoTW9kZWwpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLnByb2R1Y3RzID0gci5yZXN1bHRzO1xyXG4gICAgICAgICAgICAgICAgJGN0cmwuc2VhcmNoTW9kZWwgPSByO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlICRjdHJsLnNlYXJjaE1vZGVsLnJlc3VsdHM7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwucGFnZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRjdHJsLnNlYXJjaCh0YWJsZVN0YXRlUmVmKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJG1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiAncHJvZHVjdEVkaXQnLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlOiBcIjxcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcclxuICAgICAgICAgICAgfSkucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwucHJvZHVjdHMudW5zaGlmdChyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgdG9hc3RyLmluZm8oJ0NyZWF0ZWQgJyArIHJlc3VsdC50aXRsZSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkkgd2FzIGRpbWlzc2VkLCBzbyBkbyB3aGF0IEkgbmVlZCB0byBkbyBteUNvbnRlbnQncyBjb250cm9sbGVyIG5vdy4gIFJlYXNvbiB3YXMtPlwiICsgcmVhc29uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5lZGl0ID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgJG1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiAncHJvZHVjdEVkaXQnLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlOiBcIjxcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogaXRlbS5pZFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcclxuICAgICAgICAgICAgfSkucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoaXRlbSwgcmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIHRvYXN0ci5pbmZvKCdTYXZlZCAnICsgcmVzdWx0LnRpdGxlKTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVhc29uJywgcmVhc29uKTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuZGVsZXRlID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgJG5nQ29uZmlybSh7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0RlbGV0ZScsXHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSA8YnIgLz48c3Ryb25nPicgKyBpdGVtLnRpdGxlICsgJzwvc3Ryb25nPj8nLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3JlZCcsXHJcbiAgICAgICAgICAgICAgICBidXR0b25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeWVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXM6IFsneSddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIChzY29wZSwgYnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0LnJlbW92ZShpdGVtLmlkKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkeCA9ICRjdHJsLnByb2R1Y3RzLmluZGV4T2YoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGN0cmwucHJvZHVjdHMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLndhcm5pbmcoJ0RlbGV0ZWQgJyArIGl0ZW0udGl0bGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG5vOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXM6IFsnTiddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIChzY29wZSwgYnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuc2hvd0RldGFpbHMgPSBmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAkbW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICdwcm9kdWN0U3VtbWFyeScsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2U6IFwiPFwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGFzTW9kYWw6IHRydWVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaXplOiAnbWQnXHJcbiAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkkgd2FzIGNsb3NlZCwgc28gZG8gd2hhdCBJIG5lZWQgdG8gZG8gbXlDb250ZW50J3MgY29udHJvbGxlciBub3cuICBSZXN1bHQgd2FzLT5cIik7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZChpdGVtLCByZXN1bHQpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXCJJIHdhcyBkaW1pc3NlZCwgc28gZG8gd2hhdCBJIG5lZWQgdG8gZG8gbXlDb250ZW50J3MgY29udHJvbGxlciBub3cuICBSZWFzb24gd2FzLT5cIiArIHJlYXNvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtb2R1bGUuY29tcG9uZW50KCdwcm9kdWN0TGlzdCcsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9wcm9kdWN0L3Byb2R1Y3QtbGlzdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHVpYk1vZGFsJywgJyRuZ0NvbmZpcm0nLCAndG9hc3RyJywgJ1Byb2R1Y3QnLCBjb250cm9sbGVyXVxyXG4gICAgICAgIH0pO1xyXG5cclxufVxyXG4pKCk7IiwiLy9wcm9kdWN0LXN1bW1hcnkuY29tcG9uZW50LmpzXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNvbnRyb2xsZXIoJG1vZGFsLCBzZXJ2aWNlKSB7XHJcbiAgICAgICAgdmFyICRjdHJsID0gdGhpcztcclxuXHJcbiAgICAgICAgJGN0cmwuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGN0cmwubG9hZGluZyA9IHRydWU7IFxyXG4gICAgICAgICAgICBpZiAoJGN0cmwucmVzb2x2ZSkge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwuaWQgPSAkY3RybC5yZXNvbHZlLmlkO1xyXG4gICAgICAgICAgICAgICAgJGN0cmwuYXNNb2RhbCA9ICRjdHJsLnJlc29sdmUuYXNNb2RhbDtcclxuICAgICAgICAgICAgICAgICRjdHJsLmFkZFN0YWZmVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXJ2aWNlLmdldFByb2R1Y3QoJGN0cmwuaWQpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLnByb2R1Y3QgPSByO1xyXG4gICAgICAgICAgICAgICAgJGN0cmwubG9hZGluZyA9IGZhbHNlOyBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5lZGl0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRtb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ3Byb2R1Y3RFZGl0JyxcclxuICAgICAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZTogXCI8XCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICRjdHJsLnByb2R1Y3QuaWRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaXplOiAnbWQnXHJcbiAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRjdHJsLnByb2R1Y3QsIHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5zaG93TmV3U3RhZmYgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJG1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiAnc3RhZmZFZGl0JyxcclxuICAgICAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZTogXCI8XCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdElkOiAkY3RybC5pZFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcclxuICAgICAgICAgICAgfSkucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiSSB3YXMgY2xvc2VkLCBzbyBkbyB3aGF0IEkgbmVlZCB0byBkbyBteUNvbnRlbnQncyBjb250cm9sbGVyIG5vdy4gIFJlc3VsdCB3YXMtPlwiKTtcclxuICAgICAgICAgICAgICAgICRjdHJsLnByb2R1Y3Quc3RhZmYudW5zaGlmdChyZXN1bHQpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXCJJIHdhcyBkaW1pc3NlZCwgc28gZG8gd2hhdCBJIG5lZWQgdG8gZG8gbXlDb250ZW50J3MgY29udHJvbGxlciBub3cuICBSZWFzb24gd2FzLT5cIiArIHJlYXNvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkY3RybC5tb2RhbEluc3RhbmNlLmNsb3NlKCRjdHJsLnByb2R1Y3QpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgbW9kdWxlLmNvbXBvbmVudCgncHJvZHVjdFN1bW1hcnknLFxyXG4gICAge1xyXG4gICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgIGlkOiAnPCcsXHJcbiAgICAgICAgICAgIGFzTW9kYWw6ICc8JyxcclxuICAgICAgICAgICAgcmVzb2x2ZTogJzwnLFxyXG4gICAgICAgICAgICBjbG9zZTogJyYnLFxyXG4gICAgICAgICAgICBkaXNtaXNzOiAnJicsIFxyXG4gICAgICAgICAgICBtb2RhbEluc3RhbmNlOiAnPCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3Byb2R1Y3QvcHJvZHVjdC1zdW1tYXJ5LmNvbXBvbmVudC5odG1sJyxcclxuICAgICAgICBjb250cm9sbGVyOiBbJyR1aWJNb2RhbCcsICdQcm9kdWN0JywgY29udHJvbGxlcl1cclxuICAgIH0pO1xyXG5cclxufVxyXG4pKCk7IiwiLy9wdWJsaXNoZXItZWRpdC5jb21wb25lbnQuanNcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJyk7XHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2VFcnJvcnMocmVzcG9uc2UpIHtcclxuICAgICAgICB2YXIgZXJyb3JzID0gW107XHJcbiAgICAgICAgdmFyIGtleTtcclxuXHJcbiAgICAgICAgZm9yIChrZXkgaW4gcmVzcG9uc2UubW9kZWxTdGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UubW9kZWxTdGF0ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3BvbnNlLm1vZGVsU3RhdGVba2V5XS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKHJlc3BvbnNlLm1vZGVsU3RhdGVba2V5XVtpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVycm9ycztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKHNlcnZpY2UsIHRvYXN0ciwgJGh0dHApIHtcclxuICAgICAgICB2YXIgJGN0cmwgPSB0aGlzO1xyXG5cclxuICAgICAgICAkY3RybC4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygncHVibGlzaGVyIGVkaXQgaW5pdCcsICRjdHJsKTtcclxuICAgICAgICAgICAgJGN0cmwudGl0bGUgPSAnTmV3IFB1Ymxpc2hlcic7XHJcbiAgICAgICAgICAgICRjdHJsLnB1Ymxpc2hlciA9IHt9O1xyXG5cclxuICAgICAgICAgICAgaWYgKCRjdHJsLnJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLmlkID0gJGN0cmwucmVzb2x2ZS5pZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoJGN0cmwuaWQpIHtcclxuICAgICAgICAgICAgICAgIHNlcnZpY2UuZ2V0KCRjdHJsLmlkKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGN0cmwucHVibGlzaGVyID0gcjtcclxuICAgICAgICAgICAgICAgICAgICAkY3RybC50aXRsZSA9IHIubmFtZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRjdHJsLmRpc21pc3MoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLnNhdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoJGN0cmwucHVibGlzaGVyLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5wdXQoJ2FwaS9wdWJsaXNoZXInLCAkY3RybC5wdWJsaXNoZXIpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCgkY3RybC5wdWJsaXNoZXIsIHIuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoJ1NhdmVkIFB1Ymxpc2hlciAnLCAkY3RybC5wdWJsaXNoZXIubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGN0cmwubW9kYWxJbnN0YW5jZS5jbG9zZSgkY3RybC5wdWJsaXNoZXIpO1xyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdPb3BzLiBTb21ldGhpbmcgd2VudCB3cm9uZycsIGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKCdPb3BzLiBTb21ldGhpbmcgaGFwcGVuZWQ6ICcgKyBlcnIuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAkY3RybC5lcnJvcnMgPSBwYXJzZUVycm9ycyhlcnIuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJ2FwaS9wdWJsaXNoZXInLCAkY3RybC5wdWJsaXNoZXIpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCgkY3RybC5wdWJsaXNoZXIsIHIuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoJ1NhdmVkICcsICRjdHJsLnB1Ymxpc2hlci5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAkY3RybC5tb2RhbEluc3RhbmNlLmNsb3NlKCRjdHJsLnB1Ymxpc2hlcik7XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ09vcHMuIFNvbWV0aGluZyB3ZW50IHdyb25nJywgZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoJ09vcHMuIFNvbWV0aGluZyBoYXBwZW5lZDogJyArIGVyci5kYXRhLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICRjdHJsLmVycm9ycyA9IHBhcnNlRXJyb3JzKGVyci5kYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ3B1Ymxpc2hlckVkaXQnLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGlkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBjbG9zZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgZGlzbWlzczogJyYnLFxyXG4gICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZTogJzwnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3B1Ymxpc2hlcnMvcHVibGlzaGVyLWVkaXQuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbJ1B1Ymxpc2hlcicsICd0b2FzdHInLCAnJGh0dHAnLCBjb250cm9sbGVyXVxyXG4gICAgICAgIH0pO1xyXG5cclxufVxyXG4pKCk7IiwiLy9wcm9kdWN0LnNlcnZpY2UuanNcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJyk7IFxyXG4gICAgXHJcbiAgICBtb2R1bGUuZmFjdG9yeSgnUHJvZHVjdCcsIFsnJGh0dHAnLCBzZXJ2aWNlQ29udHJvbGxlcl0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNlcnZpY2VDb250cm9sbGVyKCRodHRwKSB7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGdldFByb2R1Y3Q6IGdldFByb2R1Y3QsXHJcbiAgICAgICAgICAgIGdldEFsbFByb2R1Y3RzOiBnZXRBbGxQcm9kdWN0cyxcclxuICAgICAgICAgICAgcmVtb3ZlOiByZW1vdmUsIFxyXG4gICAgICAgICAgICBzYXZlOiBzYXZlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UHJvZHVjdChpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCdhcGkvcHJvZHVjdC8nICsgaWQpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByLmRhdGE7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRBbGxQcm9kdWN0cyhzZWFyY2hNb2RlbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCdhcGkvcHJvZHVjdCcsIHsgcGFyYW1zOiBzZWFyY2hNb2RlbCB9KS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gci5kYXRhO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlKGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5kZWxldGUoJ2FwaS9wcm9kdWN0LycgKyBpZCkudGhlbihmdW5jdGlvbihyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gci5kYXRhO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfSk7IFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2F2ZShwcm9kdWN0KSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9kdWN0LmlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAucHV0KCdhcGkvcHJvZHVjdCcsIHByb2R1Y3QpLnRoZW4oZnVuY3Rpb24ocikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByLmRhdGE7XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCdhcGkvcHJvZHVjdCcsIHByb2R1Y3QpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5kYXRhO1xyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnIubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbn1cclxuKSgpOyIsIi8vcHJvZHVjdC5zZXJ2aWNlLmpzXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcpOyBcclxuICAgIFxyXG4gICAgbW9kdWxlLmZhY3RvcnkoJ1B1Ymxpc2hlcicsIFsnJGh0dHAnLCAndG9hc3RyJywgc2VydmljZUNvbnRyb2xsZXJdKTtcclxuXHJcbiAgICBmdW5jdGlvbiBzZXJ2aWNlQ29udHJvbGxlcigkaHR0cCwgbG9nKSB7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGdldDogZ2V0LFxyXG4gICAgICAgICAgICBnZXRBbGxQdWJsaXNoZXJzOiBnZXRBbGxQdWJsaXNoZXJzLFxyXG4gICAgICAgICAgICByZW1vdmU6IHJlbW92ZSwgXHJcbiAgICAgICAgICAgIHNhdmU6IHNhdmVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXQoaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnYXBpL3B1Ymxpc2hlci8nICsgaWQpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByLmRhdGE7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdPb3BzLiBTb21ldGhpbmcgaGFwcGVuZWQgZ2V0dGluZyBwdWJsaXNoZXInKTtcclxuICAgICAgICAgICAgICAgIGxvZy5lcnJvcignT29wcy4gU29tdGhpbmcgaGFwcGVuZWQgZ2V0dGluZyBwdWJsaXNoZXI6ICcgKyBlcnIuZGF0YS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRBbGxQdWJsaXNoZXJzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCdhcGkvcHVibGlzaGVyJykudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHIuZGF0YTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZShpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCdhcGkvcHVibGlzaGVyLycgKyBpZCkudGhlbihmdW5jdGlvbihyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gci5kYXRhO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfSk7IFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2F2ZShwcm9kdWN0KSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9kdWN0LmlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAucHV0KCdhcGkvcHVibGlzaGVyJywgcHJvZHVjdCkudGhlbihmdW5jdGlvbihyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuZGF0YTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncG9zdGluZycpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJ2FwaS9wcm9kdWN0JywgcHJvZHVjdCkudGhlbihfc3VjY2VzcywgX2ZhaWx1cmUpO1xyXG4gICAgICAgICAgICAgICAgLy9yZXR1cm4gJGh0dHAucG9zdCgnYXBpL3Byb2R1Y3QnLCBwcm9kdWN0KS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICBjb25zb2xlLmxvZygnc3VjY2VzcycsIHIpO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgcmV0dXJuIHIuZGF0YTtcclxuICAgICAgICAgICAgICAgIC8vfSwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgY29uc29sZS5sb2coJ2Vycm9yJywgZXJyKTtcclxuICAgICAgICAgICAgICAgIC8vICAgIHJldHVybiBlcnI7XHJcbiAgICAgICAgICAgICAgICAvL30pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX3N1Y2Nlc3MocmVzdWx0KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdWNjZXNzJywgcmVzdWx0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhOyBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9mYWlsdXJlKGVycikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3InLCBlcnIpO1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyLmRhdGE7IFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuKSgpOyIsIi8vc3RhZmYtZWRpdC5jb21wb25lbnQuanNcclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJyk7XHJcblxyXG4gICAgZnVuY3Rpb24gY29udHJvbGxlcigkaHR0cCkge1xyXG4gICAgICAgIHZhciAkY3RybCA9IHRoaXM7XHJcblxyXG4gICAgICAgICRjdHJsLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdGFmZiBlZGl0IGluaXQnKTtcclxuICAgICAgICAgICAgJGN0cmwudGl0bGUgPSAnTmV3IFN0YWZmJztcclxuXHJcbiAgICAgICAgICAgIGlmICgkY3RybC5yZXNvbHZlKSAkY3RybC5wcm9kdWN0SWQgPSAkY3RybC5yZXNvbHZlLnByb2R1Y3RJZDtcclxuXHJcbiAgICAgICAgICAgIGlmICgkY3RybC5yZXNvbHZlLnN0YWZmKSB7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5zdGFmZiA9ICRjdHJsLnJlc29sdmUuc3RhZmY7XHJcbiAgICAgICAgICAgICAgICAkY3RybC50aXRsZSA9ICRjdHJsLnN0YWZmLmZpcnN0bmFtZSArICcgJyArICRjdHJsLnN0YWZmLmxhc3RuYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRjdHJsLmRpc21pc3MoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkY3RybC5zYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoJGN0cmwucHJvZHVjdElkKSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KCdhcGkvc3RhZmYvJyArICRjdHJsLnByb2R1Y3RJZCwgJGN0cmwuc3RhZmYpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCgkY3RybC5zdGFmZiwgci5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAkY3RybC5tb2RhbEluc3RhbmNlLmNsb3NlKHIuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NvbWV0aGluZyB3ZW50IHdyb25nJywgZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KCdhcGkvc3RhZmYnLCAkY3RybC5zdGFmZikudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRjdHJsLnN0YWZmLCByLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICRjdHJsLm1vZGFsSW5zdGFuY2UuY2xvc2Uoci5kYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc29tZXRoaW5nIHdlbnQgd3JvbmcnLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgbW9kdWxlLmNvbXBvbmVudCgnc3RhZmZFZGl0JyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBjbG9zZTogJyYnLFxyXG4gICAgICAgICAgICAgICAgZGlzbWlzczogJyYnLFxyXG4gICAgICAgICAgICAgICAgc3RhZmY6ICc8JyxcclxuICAgICAgICAgICAgICAgIHByb2R1Y3RJZDogJzwnLFxyXG4gICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZTogJzwnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3N0YWZmL3N0YWZmLWVkaXQuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiBbJyRodHRwJywgY29udHJvbGxlcl1cclxuICAgICAgICB9KTtcclxufVxyXG4pKCk7IiwiLy9zdGFmZi1saXN0LmNvbXBvbmVudC5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKCRodHRwLCAkbW9kYWwsICRuZ0NvbmZpcm0pIHtcclxuICAgICAgICB2YXIgJGN0cmwgPSB0aGlzO1xyXG5cclxuICAgICAgICAkY3RybC4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc3RhZmYgbGlzdCBpbml0Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5lZGl0ID0gZnVuY3Rpb24gKG1lbWJlcikge1xyXG4gICAgICAgICAgICAkbW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICdzdGFmZkVkaXQnLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlOiBcIjxcIixcclxuICAgICAgICAgICAgICAgICAgICBzdGFmZjogbWVtYmVyXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YWZmOiBtZW1iZXJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaXplOiAnbWQnXHJcbiAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkkgd2FzIGNsb3NlZCwgc28gZG8gd2hhdCBJIG5lZWQgdG8gZG8gbXlDb250ZW50J3MgY29udHJvbGxlciBub3cuICBSZXN1bHQgd2FzLT5cIik7XHJcblxyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXCJJIHdhcyBkaW1pc3NlZCwgc28gZG8gd2hhdCBJIG5lZWQgdG8gZG8gbXlDb250ZW50J3MgY29udHJvbGxlciBub3cuICBSZWFzb24gd2FzLT5cIiArIHJlYXNvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuZGVsZXRlID0gZnVuY3Rpb24gKG1lbWJlcikge1xyXG4gICAgICAgICAgICAkbmdDb25maXJtKHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAnRGVsZXRlJyxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIDxiciAvPjxzdHJvbmc+JyArIG1lbWJlci5maXJzdG5hbWUgKyBtZW1iZXIubGFzdG5hbWUgKyAnPC9zdHJvbmc+PycsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAncmVkJyxcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICB5ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5czogWyd5J10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24gKHNjb3BlLCBidXR0b24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlbGV0ZSgnYXBpL3N0YWZmLycgKyBtZW1iZXIuaWQpLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWR4ID0gJGN0cmwuc3RhZmYuaW5kZXhPZihtZW1iZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjdHJsLnN0YWZmLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcicsIGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBubzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzOiBbJ04nXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoc2NvcGUsIGJ1dHRvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtb2R1bGUuY29tcG9uZW50KCdzdGFmZkxpc3QnLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHN0YWZmOiAnPCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc3RhZmYvc3RhZmYtbGlzdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJGh0dHAnLCAnJHVpYk1vZGFsJywgJyRuZ0NvbmZpcm0nLCBjb250cm9sbGVyXVxyXG4gICAgICAgIH0pO1xyXG59XHJcbikoKTsiXX0=
