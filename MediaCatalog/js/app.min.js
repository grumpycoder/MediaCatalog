!function(){"use strict";angular.module("app",["app.directives","shared.components","ui.bootstrap","smart-table"])}();
!function(){angular.module("app.directives",[])}();
!function(){var e=angular.module("app.directives");e.directive("stSubmitSearch",["stConfig","$timeout","$parse",function(e,t,r){return{require:"^stTable",link:function(e,t,r,n){return t.bind("click",function(){var e=n;e.pipe()})}}}]),e.directive("clearKey",function(){return{restrict:"EA",require:"ngModel",link:function(e,t,r,n){t.on("keydown",function(t){27===t.which&&(n.$setViewValue(null),n.$render(),e.$apply())})}}}),e.directive("stResetSearch",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){return t.bind("click",function(){var t=n[1],r=n[0];return e.$apply(function(){angular.forEach(t.$viewValue,function(e,r){"page"===r.toLowerCase()&&(t.$viewValue[r]=1),Array.isArray(e)||_.includes(r.toLowerCase(),"page")||(t.$viewValue[r]=null)});var e=r.tableState();return e.search.predicateObject={},e.pagination.start=0,r.pipe()})})}}}),e.directive("stClearKey",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){t.on("keydown",function(r){var i=n[1],a=n[0];return 13===r.which?a.pipe():27===r.which?void 0!==t.context.attributes["st-search"]?e.$apply(function(){var e=t.context.attributes["st-search"].value,r=a.tableState();return r.search.predicateObject[e]="",a.pipe()}):e.$apply(function(){i.$setViewValue(null),i.$render()}):void 0})}}})}();
!function(){angular.module("shared.components",[])}();
!function(){function n(n,o){var e=this;e.$onInit=function(){n.get("api/publisher").then(function(n){e.publishers=n.data}).catch(function(n){console.log(n.message)})},e.create=function(){o.open({component:"publisherEdit",bindings:{modalInstance:"<"},size:"lg"}).result.then(function(n){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),console.info("returning result",n),e.publishers.unshift(n),e.id=n.id},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})},e.edit=function(){o.open({component:"publisherEdit",bindings:{modalInstance:"<"},resolve:{id:e.id},size:"lg"}).result.then(function(n){angular.forEach(e.publishers,function(o){o.id===e.id&&(angular.extend(o,n),e.id=o.id)})},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})}}var o=angular.module("shared.components");o.component("publisherSelect",{bindings:{id:"="},templateUrl:"app/common/publisher-select.component.html",controller:["$http","$uibModal",n]})}();
!function(){"use strict";function t(t){function n(n){return t.get("api/product/"+n).then(function(t){return t.data}).catch(function(t){console.log(t.message)})}function e(n){return t.get("api/product",{params:n}).then(function(t){return t.data}).catch(function(t){console.log(t.message)})}function u(n){return t.delete("api/product/"+n).then(function(t){return t.data}).catch(function(t){console.log(t.message)})}function c(n){return n.id?t.put("api/product",n).then(function(t){return t.data}).catch(function(t){return t.message}):t.post("api/product",n).then(function(t){return t.data}).catch(function(t){return t.message})}return{getProduct:n,getAllProducts:e,remove:u,save:c}}var n=angular.module("app");n.factory("Product",["$http",t])}();
!function(){function t(t){var n=this;n.$onInit=function(){n.title="New Product",n.resolve&&(n.id=n.resolve.id),n.id&&t.getProduct(n.id).then(function(t){n.product=t,n.title=t.title})},n.cancel=function(){n.dismiss()},n.save=function(){return t.save(n.product).then(function(t){angular.extend(n.product,t)}).catch(function(t){console.log("Error saving product",t.message)}).finally(function(){n.modalInstance.close(n.product)})}}var n=angular.module("app");n.component("productEdit",{templateUrl:"app/product/product-edit.component.html",bindings:{id:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},controller:["Product",t]})}();
!function(){"use strict";function o(o,n){var e,t=this,s=10;t.searchModel={page:1,pageSize:s},t.$onInit=function(){console.log("product list init"),t.title="Product List"},t.search=function(o){e=o,console.log("search"),n.getAllProducts(t.searchModel).then(function(o){t.products=o.results,t.searchModel=o,delete t.searchModel.results})},t.paged=function(){t.search(e)},t.create=function(){o.open({component:"productEdit",bindings:{modalInstance:"<"},size:"md"}).result.then(function(o){t.products.unshift(o)},function(o){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+o)})},t.edit=function(n){o.open({component:"productEdit",bindings:{modalInstance:"<"},resolve:{id:n.id},size:"md"}).result.then(function(o){angular.extend(n,o)},function(o){})},t.delete=function(o){console.log("delete",o),n.remove(o.id).then(function(n){var e=t.products.indexOf(o);t.products.splice(e,1)})},t.showDetails=function(n){o.open({component:"productSummary",bindings:{modalInstance:"<"},resolve:{id:n,asModal:!0},size:"md"}).result.then(function(o){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),console.info(o)},function(o){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+o)})}}var n=angular.module("app");n.component("productList",{templateUrl:"app/product/product-list.component.html",controller:["$uibModal","Product",o]})}();
!function(){function o(o){var t=this;t.$onInit=function(){t.resolve&&(t.id=t.resolve.id,t.asModal=t.resolve.asModal,t.addStaffVisible=!1),o.getProduct(t.id).then(function(o){t.product=o})},t.createStaff=function(){console.log("add staff modal")},t.cancel=function(){t.dismiss()}}var t=angular.module("app");t.component("productSummary",{bindings:{id:"<",asModal:"<",resolve:"<",close:"&",dismiss:"&"},templateUrl:"app/product/product-summary.component.html",controller:["Product",o]})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
