!function(){"use strict";var r=angular.module("app",["ngStorage","app.directives","shared.components","ui.bootstrap","smart-table"]).config(["$localStorageProvider","$httpProvider",function(r,e){r.setKeyPrefix("mc-"),e.interceptors.push("AuthenticationInterceptor")}]);r.factory("AuthenticationInterceptor",["$localStorage","$window",function(r,e){var t=this;return t.request=function(e){return e.headers=e.headers||{},r.currentUser&&(e.headers.Authorization="Bearer "+r.currentUser.token),e},t.responseError=function(r){return console.log("response error",r),401!==r.status&&403!==r.status||(e.location="/account/login"),$q.reject(r)},t}])}();
!function(){angular.module("shared.components",[])}();
!function(){function n(n,o){var e=this;e.$onInit=function(){n.get("api/publisher").then(function(n){e.publishers=n.data}).catch(function(n){console.log(n.message)})},e.create=function(){o.open({component:"publisherEdit",bindings:{modalInstance:"<"},size:"lg"}).result.then(function(n){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),console.info("returning result",n),e.publishers.unshift(n),e.id=n.id},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})},e.edit=function(){o.open({component:"publisherEdit",bindings:{modalInstance:"<"},resolve:{id:e.id},size:"lg"}).result.then(function(n){angular.forEach(e.publishers,function(o){o.id===e.id&&(angular.extend(o,n),e.id=o.id)})},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})}}var o=angular.module("shared.components");o.component("publisherSelect",{bindings:{id:"="},templateUrl:"app/common/publisher-select.component.html",controller:["$http","$uibModal",n]})}();
!function(){function t(t){var n=this;n.$onInit=function(){n.title="New Product",n.resolve&&(n.id=n.resolve.id),n.id&&t.getProduct(n.id).then(function(t){n.product=t,n.title=t.title})},n.cancel=function(){n.dismiss()},n.save=function(){return t.save(n.product).then(function(t){angular.extend(n.product,t),n.modalInstance.close(n.product)}).catch(function(t){console.log("Error saving product",t.message)}).finally(function(){})}}var n=angular.module("app");n.component("productEdit",{templateUrl:"app/product/product-edit.component.html",bindings:{id:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},controller:["Product",t]})}();
!function(){"use strict";function o(o,n,e){var t,s=this,c=10;s.searchModel={page:1,pageSize:c},s.$onInit=function(){console.log("product list init"),s.title="Product List",e.getToken()},s.search=function(o){t=o,console.log("search"),n.getAllProducts(s.searchModel).then(function(o){s.products=o.results,s.searchModel=o,delete s.searchModel.results})},s.paged=function(){s.search(t)},s.create=function(){o.open({component:"productEdit",bindings:{modalInstance:"<"},size:"md"}).result.then(function(o){s.products.unshift(o)},function(o){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+o)})},s.edit=function(n){o.open({component:"productEdit",bindings:{modalInstance:"<"},resolve:{id:n.id},size:"md"}).result.then(function(o){angular.extend(n,o)},function(o){})},s.delete=function(o){console.log("delete",o),n.remove(o.id).then(function(n){var e=s.products.indexOf(o);s.products.splice(e,1)})},s.showDetails=function(n){o.open({component:"productSummary",bindings:{modalInstance:"<"},resolve:{id:n.id,asModal:!0},size:"md"}).result.then(function(o){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),angular.extend(n,o)},function(o){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+o)})}}var n=angular.module("app");n.component("productList",{templateUrl:"app/product/product-list.component.html",controller:["$uibModal","Product","User",o]})}();
!function(){function o(o,n){var t=this;t.$onInit=function(){t.resolve&&(t.id=t.resolve.id,t.asModal=t.resolve.asModal,t.addStaffVisible=!1),n.getProduct(t.id).then(function(o){t.product=o})},t.edit=function(){o.open({component:"productEdit",bindings:{modalInstance:"<"},resolve:{id:t.product.id},size:"md"}).result.then(function(o){angular.extend(t.product,o)},function(o){})},t.showNewStaff=function(){o.open({component:"staffEdit",bindings:{modalInstance:"<"},resolve:{productId:t.id},size:"md"}).result.then(function(o){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->"),t.product.staff.unshift(o)},function(o){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+o)})},t.cancel=function(){t.modalInstance.close(t.product)}}var n=angular.module("app");n.component("productSummary",{bindings:{id:"<",asModal:"<",resolve:"<",close:"&",dismiss:"&",modalInstance:"<"},templateUrl:"app/product/product-summary.component.html",controller:["$uibModal","Product",o]})}();
!function(){angular.module("app.directives",[])}();
!function(){var e=angular.module("app.directives");e.directive("stSubmitSearch",["stConfig","$timeout","$parse",function(e,t,r){return{require:"^stTable",link:function(e,t,r,n){return t.bind("click",function(){var e=n;e.pipe()})}}}]),e.directive("clearKey",function(){return{restrict:"EA",require:"ngModel",link:function(e,t,r,n){t.on("keydown",function(t){27===t.which&&(n.$setViewValue(null),n.$render(),e.$apply())})}}}),e.directive("stResetSearch",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){return t.bind("click",function(){var t=n[1],r=n[0];return e.$apply(function(){angular.forEach(t.$viewValue,function(e,r){"page"===r.toLowerCase()&&(t.$viewValue[r]=1),Array.isArray(e)||_.includes(r.toLowerCase(),"page")||(t.$viewValue[r]=null)});var e=r.tableState();return e.search.predicateObject={},e.pagination.start=0,r.pipe()})})}}}),e.directive("stClearKey",function(){return{restrict:"EA",require:["^stTable","^ngModel"],link:function(e,t,r,n){t.on("keydown",function(r){var i=n[1],a=n[0];return 13===r.which?a.pipe():27===r.which?void 0!==t.context.attributes["st-search"]?e.$apply(function(){var e=t.context.attributes["st-search"].value,r=a.tableState();return r.search.predicateObject[e]="",a.pipe()}):e.$apply(function(){i.$setViewValue(null),i.$render()}):void 0})}}})}();
!function(){function t(t,r){function e(){if(r.currentUser){var e=r.currentUser;t.post("api/auth/authenticate?user="+e.user+"&password="+e.password).then(function(t){e.token=t.data,r.currentUser=e}).catch(function(t){})}}return{getToken:e}}var r=angular.module("app");r.service("User",["$http","$localStorage",t])}();
!function(){"use strict";function t(t){function n(n){return t.get("api/product/"+n).then(function(t){return t.data}).catch(function(t){console.log(t.message)})}function e(n){return t.get("api/product",{params:n}).then(function(t){return t.data}).catch(function(t){console.log(t.message)})}function u(n){return t.delete("api/product/"+n).then(function(t){return t.data}).catch(function(t){console.log(t.message)})}function c(n){return n.id?t.put("api/product",n).then(function(t){return t.data}).catch(function(t){return t.message}):t.post("api/product",n).then(function(t){return t.data}).catch(function(t){return t.message})}return{getProduct:n,getAllProducts:e,remove:u,save:c}}var n=angular.module("app");n.factory("Product",["$http",t])}();
!function(){function t(t){var a=this;a.$onInit=function(){console.log("staff edit init"),a.title="New Staff",a.resolve&&(a.productId=a.resolve.productId),a.resolve.staff&&(a.staff=a.resolve.staff,a.title=a.staff.firstname+" "+a.staff.lastname)},a.cancel=function(){a.dismiss()},a.save=function(){a.productId?t.post("api/staff/"+a.productId,a.staff).then(function(t){angular.extend(a.staff,t.data),a.modalInstance.close(t.data)}).catch(function(t){console.log("something went wrong",t.message)}):t.post("api/staff",a.staff).then(function(t){angular.extend(a.staff,t.data),a.modalInstance.close(t.data)}).catch(function(t){console.log("something went wrong",t.message)})}}var a=angular.module("app");a.component("staffEdit",{bindings:{resolve:"<",close:"&",dismiss:"&",staff:"<",productId:"<",modalInstance:"<"},templateUrl:"app/staff/staff-edit.component.html",controller:["$http",t]})}();
!function(){function n(n,t){var o=this;o.$onInit=function(){console.log("staff list init")},o.edit=function(n){t.open({component:"staffEdit",bindings:{modalInstance:"<",staff:n},resolve:{staff:n},size:"md"}).result.then(function(n){console.info("I was closed, so do what I need to do myContent's controller now.  Result was->")},function(n){console.info("I was dimissed, so do what I need to do myContent's controller now.  Reason was->"+n)})},o.delete=function(t){n.delete("api/staff/"+t.id).then(function(n){var e=o.staff.indexOf(t);o.staff.splice(e,1)}).catch(function(n){console.log("error",n.message)})}}var t=angular.module("app");t.component("staffList",{bindings:{staff:"<"},templateUrl:"app/staff/staff-list.component.html",controller:["$http","$uibModal",n]})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJjb21tb24vY29tcG9uZW50cy5tb2R1bGUuanMiLCJjb21tb24vcHVibGlzaGVyLXNlbGVjdC5jb21wb25lbnQuanMiLCJwcm9kdWN0L3Byb2R1Y3QtZWRpdC5jb21wb25lbnQuanMiLCJwcm9kdWN0L3Byb2R1Y3QtbGlzdC5jb21wb25lbnQuanMiLCJwcm9kdWN0L3Byb2R1Y3Qtc3VtbWFyeS5jb21wb25lbnQuanMiLCJkaXJlY3RpdmVzL2RpcmVjdGl2ZXMubW9kdWxlcy5qcyIsImRpcmVjdGl2ZXMvc3RUYWJsZS5kaXJlY3RpdmUuanMiLCJzZXJ2aWNlcy9hdXRoLnNlcnZpY2UuanMiLCJzZXJ2aWNlcy9wcm9kdWN0LnNlcnZpY2UuanMiLCJzdGFmZi9zdGFmZi1lZGl0LmNvbXBvbmVudC5qcyIsInN0YWZmL3N0YWZmLWxpc3QuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImFuZ3VsYXIiLCJjb25maWciLCIkbG9jYWxTdG9yYWdlUHJvdmlkZXIiLCIkaHR0cFByb3ZpZGVyIiwic2V0S2V5UHJlZml4IiwiaW50ZXJjZXB0b3JzIiwicHVzaCIsImZhY3RvcnkiLCIkbG9jYWxTdG9yYWdlIiwiJHdpbmRvdyIsInNlcnZpY2UiLCJ0aGlzIiwicmVxdWVzdCIsImhlYWRlcnMiLCJjdXJyZW50VXNlciIsIkF1dGhvcml6YXRpb24iLCJ0b2tlbiIsInJlc3BvbnNlRXJyb3IiLCJyZXNwb25zZSIsImNvbnNvbGUiLCJsb2ciLCJzdGF0dXMiLCJsb2NhdGlvbiIsIiRxIiwicmVqZWN0IiwiY29udHJvbGxlciIsIiRodHRwIiwiJHVpYk1vZGFsIiwiJGN0cmwiLCIkb25Jbml0IiwiZ2V0IiwidGhlbiIsInIiLCJwdWJsaXNoZXJzIiwiZGF0YSIsImNhdGNoIiwiZXJyIiwibWVzc2FnZSIsImNyZWF0ZSIsIm9wZW4iLCJjb21wb25lbnQiLCJiaW5kaW5ncyIsIm1vZGFsSW5zdGFuY2UiLCJzaXplIiwicmVzdWx0IiwiaW5mbyIsInVuc2hpZnQiLCJpZCIsInJlYXNvbiIsImVkaXQiLCJyZXNvbHZlIiwiZm9yRWFjaCIsIml0ZW0iLCJleHRlbmQiLCJ0ZW1wbGF0ZVVybCIsInRpdGxlIiwiZ2V0UHJvZHVjdCIsInByb2R1Y3QiLCJjYW5jZWwiLCJkaXNtaXNzIiwic2F2ZSIsImNsb3NlIiwiZmluYWxseSIsIiRtb2RhbCIsInVzZXIiLCJ0YWJsZVN0YXRlUmVmIiwicGFnZVNpemVEZWZhdWx0Iiwic2VhcmNoTW9kZWwiLCJwYWdlIiwicGFnZVNpemUiLCJnZXRUb2tlbiIsInNlYXJjaCIsInRhYmxlU3RhdGUiLCJnZXRBbGxQcm9kdWN0cyIsInByb2R1Y3RzIiwicmVzdWx0cyIsInBhZ2VkIiwiZGVsZXRlIiwicmVtb3ZlIiwiaWR4IiwiaW5kZXhPZiIsInNwbGljZSIsInNob3dEZXRhaWxzIiwiYXNNb2RhbCIsImFkZFN0YWZmVmlzaWJsZSIsInNob3dOZXdTdGFmZiIsInByb2R1Y3RJZCIsInN0YWZmIiwiZGlyZWN0aXZlIiwic3RDb25maWciLCIkdGltZW91dCIsIiRwYXJzZSIsInJlcXVpcmUiLCJsaW5rIiwic2NvcGUiLCJlbGVtZW50IiwiYXR0ciIsImN0cmwiLCJiaW5kIiwidGFibGVDdHJsIiwicGlwZSIsInJlc3RyaWN0IiwiZWwiLCJhdHRycyIsIm9uIiwiZXZlbnQiLCJ3aGljaCIsIiRzZXRWaWV3VmFsdWUiLCIkcmVuZGVyIiwiJGFwcGx5IiwiY3RybHMiLCJtb2RlbCIsIiR2aWV3VmFsdWUiLCJ2YWx1ZSIsImtleSIsInRvTG93ZXJDYXNlIiwiQXJyYXkiLCJpc0FycmF5IiwiXyIsImluY2x1ZGVzIiwicHJlZGljYXRlT2JqZWN0IiwicGFnaW5hdGlvbiIsInN0YXJ0IiwibmdNb2RlbCIsInVuZGVmaW5lZCIsImNvbnRleHQiLCJhdHRyaWJ1dGVzIiwiZmllbGROYW1lIiwicG9zdCIsInBhc3N3b3JkIiwic2VydmljZUNvbnRyb2xsZXIiLCJwYXJhbXMiLCJwdXQiLCJmaXJzdG5hbWUiLCJsYXN0bmFtZSIs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VUFBVyxJQUNYNUMsY0FBZSxLQUVuQlksWUFBYSxzQ0FDYjdCLFlBQWEsUUFBU0E7Q0NwRGxDLFdBR0ksUUFBU0EsR0FBV0MsRUFBT3FDLEdBQ3ZCLEdBQUluQyxHQUFRakIsSUFFWmlCLEdBQU1DLFFBQVUsV0FDWlYsUUFBUUMsSUFBSSxvQkFHaEJRLEVBQU1xQixLQUFPLFNBQVNzRixHQUNsQnhFLEVBQU94QixNQUNIQyxVQUFXLFlBQ1hDLFVBQ0lDLGNBQWUsSUFDZjZDLE1BQU9nRCxHQUVYckYsU0FDSXFDLE1BQU9nRCxHQUVYNUYsS0FBTSxPQUNQQyxPQUFPYixLQUFLLFNBQVVhLEdBQ3JCekIsUUFBUTBCLEtBQUssb0ZBRWQsU0FBVUcsR0FDVDdCLFFBQVEwQixLQUFLLG9GQUFzRkcsTUFJM0dwQixFQUFNaUQsT0FBUyxTQUFTMEQsR0FDcEI3RyxFQUFNbUQsT0FBTyxhQUFlMEQsRUFBT3hGLElBQUloQixLQUFLLFNBQVNDLEdBQ2pELEdBQUkrQyxHQUFNbkQsRUFBTTJELE1BQU1QLFFBQVF1RCxFQUM5QjNHLEdBQU0yRCxNQUFNTixPQUFPRixFQUFLLEtBQ3pCNUMsTUFBTSxTQUFTQyxHQUNkakIsUUFBUUMsSUFBSSxRQUFTZ0IsRUFBSUMsWUFqQ3JDLEdBQUl0QyxHQUFTQyxRQUFRRCxPQUFPLE1BdUM1QkEsR0FBT3lDLFVBQVUsYUFFVEMsVUFDSThDLE1BQU8sS0FFWGpDLFlBQWEsc0NBQ2I3QixZQUFhLFFBQVMsWUFBYUEiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vYXBwLm1vZHVsZS5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJyxcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgICduZ1N0b3JhZ2UnLFxyXG4gICAgICAgICAgICAnYXBwLmRpcmVjdGl2ZXMnLFxyXG4gICAgICAgICAgICAnc2hhcmVkLmNvbXBvbmVudHMnLFxyXG4gICAgICAgICAgICAndWkuYm9vdHN0cmFwJyxcclxuICAgICAgICAgICAgJ3NtYXJ0LXRhYmxlJ1xyXG4gICAgICAgIF0pLmNvbmZpZyhbJyRsb2NhbFN0b3JhZ2VQcm92aWRlcicsICckaHR0cFByb3ZpZGVyJyxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKCRsb2NhbFN0b3JhZ2VQcm92aWRlciwgJGh0dHBQcm92aWRlcikge1xyXG4gICAgICAgICAgICAgICAgJGxvY2FsU3RvcmFnZVByb3ZpZGVyLnNldEtleVByZWZpeCgnbWMtJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdBdXRoZW50aWNhdGlvbkludGVyY2VwdG9yJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdKTtcclxuXHJcblxyXG4gICAgbW9kdWxlLmZhY3RvcnkoJ0F1dGhlbnRpY2F0aW9uSW50ZXJjZXB0b3InLFxyXG4gICAgICAgIFsnJGxvY2FsU3RvcmFnZScsICckd2luZG93JywgZnVuY3Rpb24gKCRsb2NhbFN0b3JhZ2UsICR3aW5kb3cpIHtcclxuICAgICAgICAgICAgdmFyIHNlcnZpY2UgPSB0aGlzO1xyXG4gICAgICAgICAgICBzZXJ2aWNlLnJlcXVlc3QgPSBmdW5jdGlvbiAoY29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgaWYgKCRsb2NhbFN0b3JhZ2UuY3VycmVudFVzZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0JlYXJlciAnICsgJGxvY2FsU3RvcmFnZS5jdXJyZW50VXNlci50b2tlbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBzZXJ2aWNlLnJlc3BvbnNlRXJyb3IgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXNwb25zZSBlcnJvcicsIHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSB8fCByZXNwb25zZS5zdGF0dXMgPT09IDQwMykge1xyXG4gICAgICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24gPSAnL2FjY291bnQvbG9naW4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc2VydmljZTtcclxuICAgICAgICB9XSk7XHJcblxyXG59KSgpOyIsIi8vc2hhcmVkLWNvbXBvbmVudHMubW9kdWxlLmpzXHJcbihmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3NoYXJlZC5jb21wb25lbnRzJywgW10pO1xyXG4gICAgfVxyXG4pKCk7IiwiLy9wdWJsaXNoZXItbGlzdC5jb21wb25lbnQuanNcclxuKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ3NoYXJlZC5jb21wb25lbnRzJyk7XHJcblxyXG4gICAgZnVuY3Rpb24gY29udHJvbGxlcigkaHR0cCwgJHVpYk1vZGFsKSB7XHJcbiAgICAgICAgdmFyICRjdHJsID0gdGhpcztcclxuXHJcbiAgICAgICAgJGN0cmwuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGh0dHAuZ2V0KCdhcGkvcHVibGlzaGVyJykudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwucHVibGlzaGVycyA9IHIuZGF0YTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiAncHVibGlzaGVyRWRpdCcsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2U6IFwiPFwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2l6ZTogJ2xnJ1xyXG4gICAgICAgICAgICB9KS5yZXN1bHQudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXCJJIHdhcyBjbG9zZWQsIHNvIGRvIHdoYXQgSSBuZWVkIHRvIGRvIG15Q29udGVudCdzIGNvbnRyb2xsZXIgbm93LiAgUmVzdWx0IHdhcy0+XCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCdyZXR1cm5pbmcgcmVzdWx0JywgcmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICRjdHJsLnB1Ymxpc2hlcnMudW5zaGlmdChyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgJGN0cmwuaWQgPSByZXN1bHQuaWQ7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkkgd2FzIGRpbWlzc2VkLCBzbyBkbyB3aGF0IEkgbmVlZCB0byBkbyBteUNvbnRlbnQncyBjb250cm9sbGVyIG5vdy4gIFJlYXNvbiB3YXMtPlwiICsgcmVhc29uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5lZGl0ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiAncHVibGlzaGVyRWRpdCcsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2U6IFwiPFwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiAkY3RybC5pZFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNpemU6ICdsZydcclxuICAgICAgICAgICAgfSkucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRjdHJsLnB1Ymxpc2hlcnMsIGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uaWQgPT09ICRjdHJsLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKGl0ZW0sIHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRjdHJsLmlkID0gaXRlbS5pZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkkgd2FzIGRpbWlzc2VkLCBzbyBkbyB3aGF0IEkgbmVlZCB0byBkbyBteUNvbnRlbnQncyBjb250cm9sbGVyIG5vdy4gIFJlYXNvbiB3YXMtPlwiICsgcmVhc29uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ3B1Ymxpc2hlclNlbGVjdCcsXHJcbiAgICB7XHJcbiAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgaWQ6ICc9J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvY29tbW9uL3B1Ymxpc2hlci1zZWxlY3QuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IFsnJGh0dHAnLCAnJHVpYk1vZGFsJywgY29udHJvbGxlcl1cclxuICAgIH0pO1xyXG5cclxuXHJcbn1cclxuKSgpOyIsIi8vcHJvZHVjdC1lZGl0LmNvbXBvbmVudC5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKHNlcnZpY2UpIHtcclxuICAgICAgICB2YXIgJGN0cmwgPSB0aGlzO1xyXG5cclxuICAgICAgICAkY3RybC4kb25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkY3RybC50aXRsZSA9ICdOZXcgUHJvZHVjdCc7IFxyXG4gICAgICAgICAgICBpZiAoJGN0cmwucmVzb2x2ZSkge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwuaWQgPSAkY3RybC5yZXNvbHZlLmlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgkY3RybC5pZCkge1xyXG4gICAgICAgICAgICAgICAgc2VydmljZS5nZXRQcm9kdWN0KCRjdHJsLmlkKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGN0cmwucHJvZHVjdCA9IHI7XHJcbiAgICAgICAgICAgICAgICAgICAgJGN0cmwudGl0bGUgPSByLnRpdGxlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRjdHJsLmRpc21pc3MoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLnNhdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXJ2aWNlLnNhdmUoJGN0cmwucHJvZHVjdCkudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoJGN0cmwucHJvZHVjdCwgcik7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5tb2RhbEluc3RhbmNlLmNsb3NlKCRjdHJsLnByb2R1Y3QpO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3Igc2F2aW5nIHByb2R1Y3QnLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ3Byb2R1Y3RFZGl0JyxcclxuICAgIHtcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9wcm9kdWN0L3Byb2R1Y3QtZWRpdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgaWQ6ICc8JyxcclxuICAgICAgICAgICAgcmVzb2x2ZTogJzwnLFxyXG4gICAgICAgICAgICBjbG9zZTogJyYnLFxyXG4gICAgICAgICAgICBkaXNtaXNzOiAnJicsXHJcbiAgICAgICAgICAgIG1vZGFsSW5zdGFuY2U6ICc8J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udHJvbGxlcjogWydQcm9kdWN0JywgY29udHJvbGxlcl1cclxuICAgIH0pO1xyXG59KSgpO1xyXG4gICAgIiwiLy9wcm9kdWN0LWxpc3QuY29tcG9uZW50LmpzXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKCRtb2RhbCwgcHJvZHVjdCwgdXNlcikge1xyXG4gICAgICAgIHZhciAkY3RybCA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHBhZ2VTaXplRGVmYXVsdCA9IDEwO1xyXG4gICAgICAgIHZhciB0YWJsZVN0YXRlUmVmO1xyXG5cclxuICAgICAgICAkY3RybC5zZWFyY2hNb2RlbCA9IHtcclxuICAgICAgICAgICAgcGFnZTogMSxcclxuICAgICAgICAgICAgcGFnZVNpemU6IHBhZ2VTaXplRGVmYXVsdFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRjdHJsLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwcm9kdWN0IGxpc3QgaW5pdCcpO1xyXG4gICAgICAgICAgICAkY3RybC50aXRsZSA9ICdQcm9kdWN0IExpc3QnO1xyXG4gICAgICAgICAgICB1c2VyLmdldFRva2VuKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5zZWFyY2ggPSBmdW5jdGlvbiAodGFibGVTdGF0ZSkge1xyXG4gICAgICAgICAgICB0YWJsZVN0YXRlUmVmID0gdGFibGVTdGF0ZTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3NlYXJjaCcpO1xyXG4gICAgICAgICAgICBwcm9kdWN0LmdldEFsbFByb2R1Y3RzKCRjdHJsLnNlYXJjaE1vZGVsKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5wcm9kdWN0cyA9IHIucmVzdWx0cztcclxuICAgICAgICAgICAgICAgICRjdHJsLnNlYXJjaE1vZGVsID0gcjtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSAkY3RybC5zZWFyY2hNb2RlbC5yZXN1bHRzO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLnBhZ2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkY3RybC5zZWFyY2godGFibGVTdGF0ZVJlZik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRtb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ3Byb2R1Y3RFZGl0JyxcclxuICAgICAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZTogXCI8XCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaXplOiAnbWQnXHJcbiAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLnByb2R1Y3RzLnVuc2hpZnQocmVzdWx0KTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiSSB3YXMgZGltaXNzZWQsIHNvIGRvIHdoYXQgSSBuZWVkIHRvIGRvIG15Q29udGVudCdzIGNvbnRyb2xsZXIgbm93LiAgUmVhc29uIHdhcy0+XCIgKyByZWFzb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmVkaXQgPSBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgICRtb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ3Byb2R1Y3RFZGl0JyxcclxuICAgICAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZTogXCI8XCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaXplOiAnbWQnXHJcbiAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKGl0ZW0sIHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY3RybC5kZWxldGUgPSBmdW5jdGlvbiAoaXRlbSkge1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2RlbGV0ZScsIGl0ZW0pO1xyXG4gICAgICAgICAgICBwcm9kdWN0LnJlbW92ZShpdGVtLmlkKS50aGVuKGZ1bmN0aW9uKHIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpZHggPSAkY3RybC5wcm9kdWN0cy5pbmRleE9mKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgJGN0cmwucHJvZHVjdHMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gICBcclxuICAgICAgICBcclxuICAgICAgICAkY3RybC5zaG93RGV0YWlscyA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICRtb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ3Byb2R1Y3RTdW1tYXJ5JyxcclxuICAgICAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZTogXCI8XCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgYXNNb2RhbDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcclxuICAgICAgICAgICAgfSkucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiSSB3YXMgY2xvc2VkLCBzbyBkbyB3aGF0IEkgbmVlZCB0byBkbyBteUNvbnRlbnQncyBjb250cm9sbGVyIG5vdy4gIFJlc3VsdCB3YXMtPlwiKTtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKGl0ZW0sIHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkkgd2FzIGRpbWlzc2VkLCBzbyBkbyB3aGF0IEkgbmVlZCB0byBkbyBteUNvbnRlbnQncyBjb250cm9sbGVyIG5vdy4gIFJlYXNvbiB3YXMtPlwiICsgcmVhc29uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ3Byb2R1Y3RMaXN0JyxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL3Byb2R1Y3QvcHJvZHVjdC1saXN0LmNvbXBvbmVudC5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogWyckdWliTW9kYWwnLCAnUHJvZHVjdCcsICdVc2VyJywgY29udHJvbGxlcl1cclxuICAgICAgICB9KTtcclxuXHJcbn1cclxuKSgpOyIsIi8vcHJvZHVjdC1zdW1tYXJ5LmNvbXBvbmVudC5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKCRtb2RhbCwgc2VydmljZSkge1xyXG4gICAgICAgIHZhciAkY3RybCA9IHRoaXM7XHJcblxyXG4gICAgICAgICRjdHJsLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICgkY3RybC5yZXNvbHZlKSB7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5pZCA9ICRjdHJsLnJlc29sdmUuaWQ7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5hc01vZGFsID0gJGN0cmwucmVzb2x2ZS5hc01vZGFsO1xyXG4gICAgICAgICAgICAgICAgJGN0cmwuYWRkU3RhZmZWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlcnZpY2UuZ2V0UHJvZHVjdCgkY3RybC5pZCkudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgJGN0cmwucHJvZHVjdCA9IHI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuZWRpdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkbW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6ICdwcm9kdWN0RWRpdCcsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2U6IFwiPFwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiAkY3RybC5wcm9kdWN0LmlkXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2l6ZTogJ21kJ1xyXG4gICAgICAgICAgICB9KS5yZXN1bHQudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCgkY3RybC5wcm9kdWN0LCByZXN1bHQpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuc2hvd05ld1N0YWZmID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRtb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogJ3N0YWZmRWRpdCcsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2U6IFwiPFwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RJZDogJGN0cmwuaWRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaXplOiAnbWQnXHJcbiAgICAgICAgICAgIH0pLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkkgd2FzIGNsb3NlZCwgc28gZG8gd2hhdCBJIG5lZWQgdG8gZG8gbXlDb250ZW50J3MgY29udHJvbGxlciBub3cuICBSZXN1bHQgd2FzLT5cIik7XHJcbiAgICAgICAgICAgICAgICAkY3RybC5wcm9kdWN0LnN0YWZmLnVuc2hpZnQocmVzdWx0KTtcclxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiSSB3YXMgZGltaXNzZWQsIHNvIGRvIHdoYXQgSSBuZWVkIHRvIGRvIG15Q29udGVudCdzIGNvbnRyb2xsZXIgbm93LiAgUmVhc29uIHdhcy0+XCIgKyByZWFzb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGN0cmwubW9kYWxJbnN0YW5jZS5jbG9zZSgkY3RybC5wcm9kdWN0KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5jb21wb25lbnQoJ3Byb2R1Y3RTdW1tYXJ5JyxcclxuICAgIHtcclxuICAgICAgICBiaW5kaW5nczoge1xyXG4gICAgICAgICAgICBpZDogJzwnLFxyXG4gICAgICAgICAgICBhc01vZGFsOiAnPCcsXHJcbiAgICAgICAgICAgIHJlc29sdmU6ICc8JyxcclxuICAgICAgICAgICAgY2xvc2U6ICcmJyxcclxuICAgICAgICAgICAgZGlzbWlzczogJyYnLCBcclxuICAgICAgICAgICAgbW9kYWxJbnN0YW5jZTogJzwnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9wcm9kdWN0L3Byb2R1Y3Qtc3VtbWFyeS5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogWyckdWliTW9kYWwnLCAnUHJvZHVjdCcsIGNvbnRyb2xsZXJdXHJcbiAgICB9KTtcclxuXHJcbn1cclxuKSgpOyIsIi8vZGlyZWN0aXZlcy5tb2R1bGVzLmpzXHJcbihmdW5jdGlvbigpIHtcclxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAuZGlyZWN0aXZlcycsIFtdKTsgXHJcbn0pKCk7IiwiLy9zdFRhYmxlLmRpcmVjdGl2ZS5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIHZhciBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYXBwLmRpcmVjdGl2ZXMnKTtcclxuXHJcbiAgICBtb2R1bGUuZGlyZWN0aXZlKCdzdFN1Ym1pdFNlYXJjaCcsIFsnc3RDb25maWcnLCAnJHRpbWVvdXQnLCAnJHBhcnNlJywgZnVuY3Rpb24gKHN0Q29uZmlnLCAkdGltZW91dCwgJHBhcnNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVxdWlyZTogJ15zdFRhYmxlJyxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5iaW5kKCdjbGljaycsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGVDdHJsID0gY3RybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDdHJsLnBpcGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG5cclxuICAgIG1vZHVsZS5kaXJlY3RpdmUoXCJjbGVhcktleVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFQScsXHJcbiAgICAgICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbCwgYXR0cnMsIGN0cmwpIHtcclxuICAgICAgICAgICAgICAgIGVsLm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoICE9PSAyNykgeyByZXR1cm47IH0gLy8gY2hlY2sga2V5IGhvdyB5b3Ugd2FudFxyXG4gICAgICAgICAgICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBjdHJsLiRyZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBtb2R1bGUuZGlyZWN0aXZlKFwic3RSZXNldFNlYXJjaFwiLFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3RyaWN0OiAnRUEnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmU6IFsnXnN0VGFibGUnLCAnXm5nTW9kZWwnXSxcclxuICAgICAgICAgICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5iaW5kKCdjbGljaycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGVsID0gY3RybHNbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN0cmwgPSBjdHJsc1swXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChtb2RlbC4kdmlld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5LnRvTG93ZXJDYXNlKCkgPT09ICdwYWdlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC4kdmlld1ZhbHVlW2tleV0gPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgXy5pbmNsdWRlcyhrZXkudG9Mb3dlckNhc2UoKSwgJ3BhZ2UnKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLiR2aWV3VmFsdWVba2V5XSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlU3RhdGUgPSBjdHJsLnRhYmxlU3RhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVTdGF0ZS5zZWFyY2gucHJlZGljYXRlT2JqZWN0ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlU3RhdGUucGFnaW5hdGlvbi5zdGFydCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHJsLnBpcGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgIG1vZHVsZS5kaXJlY3RpdmUoXCJzdENsZWFyS2V5XCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0VBJyxcclxuICAgICAgICAgICAgcmVxdWlyZTogWydec3RUYWJsZScsICdebmdNb2RlbCddLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5vbigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZ01vZGVsID0gY3RybHNbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN0cmwgPSBjdHJsc1swXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSAxMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3RybC5waXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gMjcpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNvbnRleHQuYXR0cmlidXRlc1snc3Qtc2VhcmNoJ10gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkTmFtZSA9IGVsZW1lbnQuY29udGV4dC5hdHRyaWJ1dGVzWydzdC1zZWFyY2gnXS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGVTdGF0ZSA9IGN0cmwudGFibGVTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlU3RhdGUuc2VhcmNoLnByZWRpY2F0ZU9iamVjdFtmaWVsZE5hbWVdID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN0cmwucGlwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nTW9kZWwuJHJlbmRlcigpOyAvLyB3aWxsIHVwZGF0ZSB0aGUgaW5wdXQgdmFsdWUgYXMgd2VsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcblxyXG59XHJcbikoKTsiLCIvL2F1dGguc2VydmljZS5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBzZXJ2aWNlKCRodHRwLCAkbG9jYWxTdG9yYWdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0VG9rZW46IGdldFRva2VuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRUb2tlbigpIHtcclxuICAgICAgICAgICAgaWYgKCRsb2NhbFN0b3JhZ2UuY3VycmVudFVzZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VXNlciA9ICRsb2NhbFN0b3JhZ2UuY3VycmVudFVzZXI7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5wb3N0KCdhcGkvYXV0aC9hdXRoZW50aWNhdGU/dXNlcj0nICtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VXNlci51c2VyICtcclxuICAgICAgICAgICAgICAgICAgICAnJnBhc3N3b3JkPScgK1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRVc2VyLnBhc3N3b3JkKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRVc2VyLnRva2VuID0gci5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9jYWxTdG9yYWdlLmN1cnJlbnRVc2VyID0gY3VycmVudFVzZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1vZHVsZS5zZXJ2aWNlKCdVc2VyJywgWyckaHR0cCcsICckbG9jYWxTdG9yYWdlJywgc2VydmljZV0pO1xyXG59XHJcbikoKTsiLCIvL3Byb2R1Y3Quc2VydmljZS5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTsgXHJcbiAgICBcclxuICAgIG1vZHVsZS5mYWN0b3J5KCdQcm9kdWN0JywgWyckaHR0cCcsIHNlcnZpY2VDb250cm9sbGVyXSk7XHJcblxyXG4gICAgZnVuY3Rpb24gc2VydmljZUNvbnRyb2xsZXIoJGh0dHApIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0UHJvZHVjdDogZ2V0UHJvZHVjdCxcclxuICAgICAgICAgICAgZ2V0QWxsUHJvZHVjdHM6IGdldEFsbFByb2R1Y3RzLFxyXG4gICAgICAgICAgICByZW1vdmU6IHJlbW92ZSwgXHJcbiAgICAgICAgICAgIHNhdmU6IHNhdmVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRQcm9kdWN0KGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJ2FwaS9wcm9kdWN0LycgKyBpZCkudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHIuZGF0YTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdldEFsbFByb2R1Y3RzKHNlYXJjaE1vZGVsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJ2FwaS9wcm9kdWN0JywgeyBwYXJhbXM6IHNlYXJjaE1vZGVsIH0pLnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByLmRhdGE7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiByZW1vdmUoaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLmRlbGV0ZSgnYXBpL3Byb2R1Y3QvJyArIGlkKS50aGVuKGZ1bmN0aW9uKHIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByLmRhdGE7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTsgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzYXZlKHByb2R1Y3QpIHtcclxuICAgICAgICAgICAgaWYgKHByb2R1Y3QuaWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5wdXQoJ2FwaS9wcm9kdWN0JywgcHJvZHVjdCkudGhlbihmdW5jdGlvbihyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuZGF0YTtcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnIubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJ2FwaS9wcm9kdWN0JywgcHJvZHVjdCkudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByLmRhdGE7XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyci5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG4pKCk7IiwiLy9zdGFmZi1lZGl0LmNvbXBvbmVudC5qc1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb250cm9sbGVyKCRodHRwKSB7XHJcbiAgICAgICAgdmFyICRjdHJsID0gdGhpcztcclxuXHJcbiAgICAgICAgJGN0cmwuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3N0YWZmIGVkaXQgaW5pdCcpO1xyXG4gICAgICAgICAgICAkY3RybC50aXRsZSA9ICdOZXcgU3RhZmYnO1xyXG5cclxuICAgICAgICAgICAgaWYgKCRjdHJsLnJlc29sdmUpICRjdHJsLnByb2R1Y3RJZCA9ICRjdHJsLnJlc29sdmUucHJvZHVjdElkO1xyXG5cclxuICAgICAgICAgICAgaWYgKCRjdHJsLnJlc29sdmUuc3RhZmYpIHtcclxuICAgICAgICAgICAgICAgICRjdHJsLnN0YWZmID0gJGN0cmwucmVzb2x2ZS5zdGFmZjtcclxuICAgICAgICAgICAgICAgICRjdHJsLnRpdGxlID0gJGN0cmwuc3RhZmYuZmlyc3RuYW1lICsgJyAnICsgJGN0cmwuc3RhZmYubGFzdG5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGN0cmwuZGlzbWlzcygpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRjdHJsLnNhdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICgkY3RybC5wcm9kdWN0SWQpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJ2FwaS9zdGFmZi8nICsgJGN0cmwucHJvZHVjdElkLCAkY3RybC5zdGFmZikudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRjdHJsLnN0YWZmLCByLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICRjdHJsLm1vZGFsSW5zdGFuY2UuY2xvc2Uoci5kYXRhKTtcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc29tZXRoaW5nIHdlbnQgd3JvbmcnLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRodHRwLnBvc3QoJ2FwaS9zdGFmZicsICRjdHJsLnN0YWZmKS50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoJGN0cmwuc3RhZmYsIHIuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGN0cmwubW9kYWxJbnN0YW5jZS5jbG9zZShyLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzb21ldGhpbmcgd2VudCB3cm9uZycsIGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBtb2R1bGUuY29tcG9uZW50KCdzdGFmZkVkaXQnLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmU6ICc8JyxcclxuICAgICAgICAgICAgICAgIGNsb3NlOiAnJicsXHJcbiAgICAgICAgICAgICAgICBkaXNtaXNzOiAnJicsXHJcbiAgICAgICAgICAgICAgICBzdGFmZjogJzwnLFxyXG4gICAgICAgICAgICAgICAgcHJvZHVjdElkOiAnPCcsXHJcbiAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlOiAnPCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc3RhZmYvc3RhZmYtZWRpdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJGh0dHAnLCBjb250cm9sbGVyXVxyXG4gICAgICAgIH0pO1xyXG59XHJcbikoKTsiLCIvL3N0YWZmLWxpc3QuY29tcG9uZW50LmpzXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNvbnRyb2xsZXIoJGh0dHAsICRtb2RhbCkge1xyXG4gICAgICAgIHZhciAkY3RybCA9IHRoaXM7XHJcblxyXG4gICAgICAgICRjdHJsLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdGFmZiBsaXN0IGluaXQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRjdHJsLmVkaXQgPSBmdW5jdGlvbihtZW1iZXIpIHtcclxuICAgICAgICAgICAgJG1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiAnc3RhZmZFZGl0JyxcclxuICAgICAgICAgICAgICAgIGJpbmRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZTogXCI8XCIsIFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YWZmOiBtZW1iZXJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhZmY6IG1lbWJlclxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcclxuICAgICAgICAgICAgfSkucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiSSB3YXMgY2xvc2VkLCBzbyBkbyB3aGF0IEkgbmVlZCB0byBkbyBteUNvbnRlbnQncyBjb250cm9sbGVyIG5vdy4gIFJlc3VsdCB3YXMtPlwiKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oXCJJIHdhcyBkaW1pc3NlZCwgc28gZG8gd2hhdCBJIG5lZWQgdG8gZG8gbXlDb250ZW50J3MgY29udHJvbGxlciBub3cuICBSZWFzb24gd2FzLT5cIiArIHJlYXNvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGN0cmwuZGVsZXRlID0gZnVuY3Rpb24obWVtYmVyKSB7XHJcbiAgICAgICAgICAgICRodHRwLmRlbGV0ZSgnYXBpL3N0YWZmLycgKyBtZW1iZXIuaWQpLnRoZW4oZnVuY3Rpb24ocikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlkeCA9ICRjdHJsLnN0YWZmLmluZGV4T2YobWVtYmVyKTtcclxuICAgICAgICAgICAgICAgICRjdHJsLnN0YWZmLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcicsIGVyci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtb2R1bGUuY29tcG9uZW50KCdzdGFmZkxpc3QnLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgYmluZGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHN0YWZmOiAnPCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdhcHAvc3RhZmYvc3RhZmYtbGlzdC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJGh0dHAnLCAnJHVpYk1vZGFsJywgY29udHJvbGxlcl1cclxuICAgICAgICB9KTtcclxufVxyXG4pKCk7Il19
